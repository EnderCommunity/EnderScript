STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
group_declarator()<5>
IDENTIFIER(AnotherLibrary)<6>
zone_operator(open)<7>
class_declarator()<8>
IDENTIFIER(MyClass)<9>
zone_operator(open)<10>
function_declarator()<11>
info_operator()<12>
type_specifier(int)<13>
IDENTIFIER(NumOne)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
end_operator()<20>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
group_declarator()<24>
state_operator()<25>
state_specifier(public)<27>
IDENTIFIER(LibFilNam)<28>
zone_operator(open)<29>
class_declarator()<30>
state_operator()<31>
state_specifier(public)<33>
IDENTIFIER(section)<34>
zone_operator(open)<35>
function_declarator()<36>
info_operator()<37>
type_specifier(string)<38>
IDENTIFIER(myFunction)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
variable_declarator()<46>
info_operator()<47>
type_specifier(string)<48>
IDENTIFIER(output)<49>
end_operator()<50>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
end_operator()<54>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
setsize_statement()<58>
type_specifier(int)<59>
NUMBER(2)<60>
end_operator()<61>
setsize_statement()<62>
type_specifier(double)<63>
NUMBER(10)<64>
end_operator()<65>
group_declarator()<66>
state_operator()<67>
state_specifier(public)<69>
IDENTIFIER(FinalPitch)<70>
zone_operator(open)<71>
class_declarator()<72>
state_operator()<73>
state_specifier(public)<75>
IDENTIFIER(Program)<76>
zone_operator(open)<77>
variable_declarator()<78>
state_operator()<79>
state_specifier(public)<81>
info_operator()<82>
type_specifier(int)<83>
IDENTIFIER(globA)<84>
assignment_operator(=)<85>
NUMBER(0)<86>
end_operator()<87>
variable_declarator()<88>
state_operator()<89>
state_specifier(public)<91>
info_operator()<92>
type_specifier(double)<93>
IDENTIFIER(globB)<94>
assignment_operator(=)<95>
DECNUMBER(0.0)<96>
end_operator()<97>
variable_declarator()<98>
state_operator()<99>
state_specifier(public)<101>
info_operator()<102>
type_specifier(float)<103>
IDENTIFIER(globC)<104>
assignment_operator(=)<105>
DECNUMBER(0.0)<106>
end_operator()<107>
variable_declarator()<108>
state_operator()<109>
state_specifier(public)<111>
info_operator()<112>
type_specifier(char)<113>
IDENTIFIER(globD)<114>
assignment_operator(=)<115>
CHAR(D)<116>
end_operator()<117>
variable_declarator()<118>
state_operator()<119>
state_specifier(public)<121>
info_operator()<122>
type_specifier(string)<123>
IDENTIFIER(globE)<124>
assignment_operator(=)<125>
STRING(Global E)<126>
end_operator()<127>
variable_declarator()<128>
state_operator()<129>
state_specifier(public)<131>
info_operator()<132>
type_specifier(bool)<133>
IDENTIFIER(globF)<134>
assignment_operator(=)<135>
BOOLEAN(true)<136>
end_operator()<137>
variable_declarator()<138>
state_operator()<139>
state_specifier(public)<141>
info_operator()<142>
type_specifier(file)<143>
IDENTIFIER(globG)<144>
assignment_operator(=)<145>
IDENTIFIER(new)<146>
type_specifier(file)<147>
dot_operator()<148>
IDENTIFIER(stream)<149>
parentheses_operator(open)<150>
STRING(path/to/my/file.txt)<151>
parentheses_operator(close)<152>
end_operator()<153>
variable_declarator()<154>
state_operator()<155>
state_specifier(public)<157>
info_operator()<158>
type_specifier(hex)<159>
IDENTIFIER(globH)<160>
assignment_operator(=)<161>
HEX(FF)<162>
end_operator()<163>
variable_declarator()<164>
state_operator()<165>
state_specifier(public)<167>
info_operator()<168>
type_specifier(string[1])<169>
IDENTIFIER(globI)<172>
assignment_operator(=)<173>
IDENTIFIER(new)<174>
IDENTIFIER(array)<175>
dot_operator()<176>
type_specifier(string)<177>
parentheses_operator(open)<178>
NUMBER(6)<179>
parentheses_operator(close)<180>
end_operator()<181>
variable_declarator()<182>
state_operator()<183>
state_specifier(private)<185>
info_operator()<186>
type_specifier(hex[2])<187>
IDENTIFIER(globJ)<191>
assignment_operator(=)<192>
IDENTIFIER(new)<193>
IDENTIFIER(array)<194>
dot_operator()<195>
type_specifier(hex)<196>
parentheses_operator(open)<197>
NUMBER(8)<198>
separation_operator()<199>
NUMBER(2)<200>
parentheses_operator(close)<201>
end_operator()<202>
function_declarator()<203>
state_operator()<204>
state_specifier(public)<206>
info_operator()<207>
type_specifier(int)<208>
IDENTIFIER(Main)<209>
parentheses_operator(open)<210>
IDENTIFIER(envi)<211>
info_operator()<212>
type_specifier(string[1])<213>
separation_operator()<216>
IDENTIFIER(length)<217>
info_operator()<218>
type_specifier(int)<219>
parentheses_operator(close)<220>
zone_operator(open)<221>
IDENTIFIER(Func)<222>
parentheses_operator(open)<223>
parentheses_operator(close)<224>
end_operator()<225>
variable_declarator()<226>
info_operator()<227>
type_specifier(^int)<228>
IDENTIFIER(a)<230>
assignment_operator(=)<231>
NUMBER(0)<232>
end_operator()<233>
variable_declarator()<234>
info_operator()<235>
type_specifier(int)<236>
IDENTIFIER(b)<237>
assignment_operator(=)<238>
NUMBER(1)<239>
end_operator()<240>
variable_declarator()<241>
info_operator()<242>
type_specifier(^int)<243>
IDENTIFIER(c)<245>
assignment_operator(=)<246>
IDENTIFIER(Test)<247>
parentheses_operator(open)<248>
IDENTIFIER(a)<249>
separation_operator()<250>
NUMBER(1)<251>
parentheses_operator(close)<252>
end_operator()<253>
IDENTIFIER(a)<254>
assignment_operator(=)<255>
NUMBER(1)<256>
separation_operator()<257>
IDENTIFIER(c)<258>
assignment_operator(=)<259>
NUMBER(5)<260>
end_operator()<261>
IDENTIFIER(a)<262>
assignment_operator(=)<263>
IDENTIFIER(c)<264>
assignment_operator(=)<265>
NUMBER(6)<266>
end_operator()<267>
IDENTIFIER(PlusOne)<268>
parentheses_operator(open)<269>
IDENTIFIER(b)<270>
info_operator()<271>
ref_statement()<272>
parentheses_operator(close)<273>
end_operator()<274>
variable_declarator()<275>
info_operator()<276>
type_specifier(bool)<277>
IDENTIFIER(myTest)<278>
assignment_operator(=)<279>
BOOLEAN(false)<280>
end_operator()<281>
if_statement()<282>
parentheses_operator(open)<283>
IDENTIFIER(myTest)<284>
comparison_operator(=)<285>
BOOLEAN(true)<287>
parentheses_operator(close)<288>
zone_operator(open)<289>
zone_operator(close)<290>
else_statement()<291>
zone_operator(open)<292>
zone_operator(close)<293>
if_statement()<294>
parentheses_operator(open)<295>
IDENTIFIER(myTest)<296>
comparison_operator(!)<297>
BOOLEAN(true)<299>
parentheses_operator(close)<300>
zone_operator(open)<301>
zone_operator(close)<302>
if_statement()<303>
parentheses_operator(open)<304>
NUMBER(1)<305>
comparison_operator(>)<306>
NUMBER(5)<308>
comparison_operator(|)<309>
NUMBER(1)<311>
comparison_operator(~>)<312>
NUMBER(5)<313>
comparison_operator(|)<314>
parentheses_operator(open)<316>
NUMBER(1)<317>
comparison_operator(~>)<318>
NUMBER(1)<319>
comparison_operator(&)<320>
NUMBER(1)<322>
comparison_operator(~<)<323>
NUMBER(1)<324>
parentheses_operator(close)<325>
parentheses_operator(close)<326>
zone_operator(open)<327>
zone_operator(close)<328>
if_statement()<329>
parentheses_operator(open)<330>
NUMBER(1)<331>
comparison_operator(<)<332>
NUMBER(5)<334>
comparison_operator(|)<335>
NUMBER(1)<337>
comparison_operator(~<)<338>
NUMBER(5)<339>
parentheses_operator(close)<340>
zone_operator(open)<341>
zone_operator(close)<342>
IDENTIFIER(io)<343>
dot_operator()<344>
IDENTIFIER(console)<345>
dot_operator()<346>
IDENTIFIER(print)<347>
parentheses_operator(open)<348>
STRING(Hello there!)<349>
parentheses_operator(close)<350>
end_operator()<351>
return_statement()<352>
NUMBER(0)<353>
end_operator()<354>
zone_operator(close)<355>
function_declarator()<356>
state_operator()<357>
state_specifier(private)<359>
info_operator()<360>
type_specifier(void)<361>
IDENTIFIER(Func)<362>
parentheses_operator(open)<363>
parentheses_operator(close)<364>
zone_operator(open)<365>
zone_operator(close)<366>
function_declarator()<367>
state_operator()<368>
state_specifier(public)<370>
info_operator()<371>
type_specifier(^int)<372>
IDENTIFIER(Test)<374>
parentheses_operator(open)<375>
IDENTIFIER(a)<376>
info_operator()<377>
type_specifier(^int)<378>
separation_operator()<380>
IDENTIFIER(b)<381>
info_operator()<382>
type_specifier(int)<383>
parentheses_operator(close)<384>
zone_operator(open)<385>
IDENTIFIER(a)<386>
assignment_operator(=)<387>
parentheses_operator(open)<388>
type_specifier(^int)<389>
parentheses_operator(close)<391>
IDENTIFIER(b)<392>
end_operator()<393>
return_statement()<394>
IDENTIFIER(a)<395>
end_operator()<396>
zone_operator(close)<397>
function_declarator()<398>
state_operator()<399>
state_specifier(public)<401>
info_operator()<402>
type_specifier(void)<403>
IDENTIFIER(PlusOne)<404>
parentheses_operator(open)<405>
IDENTIFIER(a)<406>
info_operator()<407>
type_specifier(int)<408>
info_operator()<409>
ref_statement()<410>
parentheses_operator(close)<411>
zone_operator(open)<412>
IDENTIFIER(a)<413>
assignment_short_operator(+)<414>
end_operator()<416>
zone_operator(close)<417>
function_declarator()<418>
state_operator()<419>
state_specifier(public)<421>
info_operator()<422>
type_specifier(void)<423>
IDENTIFIER(myTests)<424>
parentheses_operator(open)<425>
parentheses_operator(close)<426>
zone_operator(open)<427>
variable_declarator()<428>
info_operator()<429>
type_specifier(bool)<430>
IDENTIFIER(myTest)<431>
assignment_operator(=)<432>
BOOLEAN(false)<433>
end_operator()<434>
variable_declarator()<435>
info_operator()<436>
type_specifier(int)<437>
IDENTIFIER(a)<438>
assignment_operator(=)<439>
NUMBER(0)<440>
separation_operator()<441>
IDENTIFIER(b)<442>
assignment_operator(=)<443>
NUMBER(0)<444>
end_operator()<445>
variable_declarator()<446>
info_operator()<447>
type_specifier(double)<448>
IDENTIFIER(c)<449>
assignment_operator(=)<450>
NUMBER(4)<451>
separation_operator()<452>
IDENTIFIER(d)<453>
assignment_operator(=)<454>
NUMBER(3)<455>
end_operator()<456>
IDENTIFIER(myTest)<457>
assignment_short_operator(!)<458>
end_operator()<460>
IDENTIFIER(myTest)<461>
assignment_operator(=)<462>
negative_operator()<463>
IDENTIFIER(myTest)<464>
end_operator()<465>
IDENTIFIER(a)<466>
assignment_short_operator(+)<467>
end_operator()<469>
IDENTIFIER(a)<470>
assignment_operator(+)<471>
NUMBER(1)<473>
end_operator()<474>
IDENTIFIER(a)<475>
assignment_operator(=)<476>
IDENTIFIER(a)<477>
maths_operator(+)<478>
NUMBER(1)<479>
end_operator()<480>
IDENTIFIER(b)<481>
assignment_short_operator(-)<482>
end_operator()<484>
IDENTIFIER(b)<485>
assignment_operator(-)<486>
NUMBER(1)<488>
end_operator()<489>
IDENTIFIER(b)<490>
assignment_operator(=)<491>
IDENTIFIER(b)<492>
maths_operator(-)<493>
NUMBER(1)<494>
end_operator()<495>
IDENTIFIER(c)<496>
assignment_operator(%)<497>
IDENTIFIER(d)<499>
end_operator()<500>
IDENTIFIER(c)<501>
maths_operator(%)<502>
IDENTIFIER(d)<503>
end_operator()<504>
IDENTIFIER(c)<505>
assignment_operator(/)<506>
DECNUMBER(0.5)<508>
end_operator()<509>
IDENTIFIER(c)<510>
maths_operator(/)<511>
IDENTIFIER(d)<512>
end_operator()<513>
IDENTIFIER(c)<514>
assignment_operator(*)<515>
IDENTIFIER(d)<517>
end_operator()<518>
IDENTIFIER(c)<519>
assignment_operator(=)<520>
IDENTIFIER(c)<521>
maths_operator(*)<522>
IDENTIFIER(d)<523>
end_operator()<524>
zone_operator(close)<525>
function_declarator()<526>
info_operator()<527>
type_specifier(string)<528>
IDENTIFIER(myStringTest)<529>
parentheses_operator(open)<530>
IDENTIFIER(a)<531>
info_operator()<532>
type_specifier(string)<533>
parentheses_operator(close)<534>
zone_operator(open)<535>
variable_declarator()<536>
info_operator()<537>
type_specifier(string)<538>
IDENTIFIER(b)<539>
assignment_operator(=)<540>
STRING(Hi!)<541>
end_operator()<542>
delete_statement()<543>
IDENTIFIER(b)<544>
end_operator()<545>
variable_declarator()<546>
info_operator()<547>
type_specifier(int)<548>
IDENTIFIER(b)<549>
assignment_operator(=)<550>
NUMBER(100)<551>
separation_operator()<552>
IDENTIFIER(c)<553>
assignment_operator(=)<554>
NUMBER(0)<555>
end_operator()<556>
delete_statement()<557>
IDENTIFIER(d)<558>
separation_operator()<559>
IDENTIFIER(c)<560>
end_operator()<561>
zone_operator(close)<562>
function_declarator()<563>
info_operator()<564>
type_specifier(hex[2])<565>
IDENTIFIER(ReturnHexArray)<569>
parentheses_operator(open)<570>
parentheses_operator(close)<571>
zone_operator(open)<572>
return_statement()<573>
IDENTIFIER(this)<574>
dot_operator()<575>
IDENTIFIER(globJ)<576>
end_operator()<577>
zone_operator(close)<578>
zone_operator(close)<579>
class_declarator()<580>
state_operator()<581>
state_specifier(public)<583>
IDENTIFIER(AnotherClass)<584>
zone_operator(open)<585>
variable_declarator()<586>
state_operator()<587>
state_specifier(public)<589>
info_operator()<590>
type_specifier(int)<591>
IDENTIFIER(a)<592>
assignment_operator(=)<593>
NUMBER(0)<594>
end_operator()<595>
variable_declarator()<596>
state_operator()<597>
state_specifier(private)<599>
info_operator()<600>
type_specifier(int)<601>
IDENTIFIER(b)<602>
assignment_operator(=)<603>
NUMBER(0)<604>
end_operator()<605>
function_declarator()<606>
state_operator()<607>
state_specifier(public)<609>
info_operator()<610>
IDENTIFIER(AnotherClass)<611>
IDENTIFIER(Construct)<612>
parentheses_operator(open)<613>
IDENTIFIER(a)<614>
info_operator()<615>
type_specifier(int)<616>
separation_operator()<617>
IDENTIFIER(b)<618>
info_operator()<619>
type_specifier(int)<620>
parentheses_operator(close)<621>
zone_operator(open)<622>
IDENTIFIER(this)<623>
dot_operator()<624>
IDENTIFIER(a)<625>
assignment_operator(=)<626>
IDENTIFIER(a)<627>
end_operator()<628>
IDENTIFIER(this)<629>
dot_operator()<630>
IDENTIFIER(b)<631>
assignment_operator(=)<632>
IDENTIFIER(b)<633>
end_operator()<634>
zone_operator(close)<635>
zone_operator(close)<636>
class_declarator()<637>
IDENTIFIER(Smth)<638>
zone_operator(open)<639>
function_declarator()<640>
info_operator()<641>
type_specifier(void)<642>
IDENTIFIER(myTest)<643>
parentheses_operator(open)<644>
IDENTIFIER(a)<645>
info_operator()<646>
type_specifier(int)<647>
parentheses_operator(close)<648>
zone_operator(open)<649>
zone_operator(close)<650>
zone_operator(close)<651>
zone_operator(close)<652>
