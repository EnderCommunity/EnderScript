STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
group_declarator()<5>
IDENTIFIER(AnotherLibrary)<6>
zone_operator(open)<7>
class_declarator()<8>
IDENTIFIER(MyClass)<9>
zone_operator(open)<10>
function_declarator()<11>
return_type_operator()<12>
type_specifier(int)<14>
IDENTIFIER(NumOne)<15>
parentheses_operator(open)<16>
parentheses_operator(close)<17>
zone_operator(open)<18>
return_statement()<19>
NUMBER(1)<20>
end_operator()<21>
zone_operator(close)<22>
zone_operator(close)<23>
zone_operator(close)<24>
state_specifier(public)<25>
group_declarator()<26>
IDENTIFIER(LibFilNam)<27>
zone_operator(open)<28>
state_specifier(public)<29>
class_declarator()<30>
IDENTIFIER(section)<31>
zone_operator(open)<32>
function_declarator()<33>
return_type_operator()<34>
type_specifier(string)<36>
IDENTIFIER(myFunction)<37>
parentheses_operator(open)<38>
type_specifier(int)<39>
IDENTIFIER(input)<40>
parentheses_operator(close)<41>
zone_operator(open)<42>
type_specifier(string)<43>
IDENTIFIER(output)<44>
end_operator()<45>
ZONE_LINE(0;)<46>
return_statement()<47>
IDENTIFIER(output)<48>
end_operator()<49>
zone_operator(close)<50>
zone_operator(close)<51>
zone_operator(close)<52>
IDENTIFIER(define)<53>
IDENTIFIER(ZERO)<54>
NUMBER(0)<55>
end_operator()<56>
setsize_statement()<57>
type_specifier(int)<58>
NUMBER(2)<59>
end_operator()<60>
setsize_statement()<61>
type_specifier(double)<62>
NUMBER(10)<63>
end_operator()<64>
state_specifier(public)<65>
group_declarator()<66>
IDENTIFIER(FinalPitch)<67>
zone_operator(open)<68>
state_specifier(public)<69>
class_declarator()<70>
IDENTIFIER(Program)<71>
zone_operator(open)<72>
state_specifier(public)<73>
type_specifier(int)<74>
IDENTIFIER(globA)<75>
assignment_operator(=)<76>
NUMBER(0)<77>
end_operator()<78>
state_specifier(public)<79>
type_specifier(double)<80>
IDENTIFIER(globB)<81>
assignment_operator(=)<82>
DECNUMBER(0.0)<83>
end_operator()<84>
state_specifier(public)<85>
type_specifier(float)<86>
IDENTIFIER(globC)<87>
assignment_operator(=)<88>
DECNUMBER(0.0)<89>
end_operator()<90>
state_specifier(public)<91>
type_specifier(char)<92>
IDENTIFIER(globD)<93>
assignment_operator(=)<94>
CHAR(D)<95>
end_operator()<96>
state_specifier(public)<97>
type_specifier(string)<98>
IDENTIFIER(globE)<99>
assignment_operator(=)<100>
STRING(Global E)<101>
end_operator()<102>
state_specifier(public)<103>
type_specifier(bool)<104>
IDENTIFIER(globF)<105>
assignment_operator(=)<106>
BOOLEAN(true)<107>
end_operator()<108>
state_specifier(public)<109>
type_specifier(file)<110>
IDENTIFIER(globG)<111>
assignment_operator(=)<112>
IDENTIFIER(new)<113>
IDENTIFIER(FileStream)<114>
parentheses_operator(open)<115>
STRING(path/to/my/file.txt)<116>
parentheses_operator(close)<117>
end_operator()<118>
state_specifier(public)<119>
type_specifier(hex)<120>
IDENTIFIER(globH)<121>
assignment_operator(=)<122>
HEX(FF)<123>
end_operator()<124>
state_specifier(public)<125>
type_specifier(string[1])<126>
IDENTIFIER(globI)<129>
assignment_operator(=)<130>
IDENTIFIER(new)<131>
IDENTIFIER(Array)<132>
return_type_operator()<133>
type_specifier(string[1])<135>
parentheses_operator(open)<138>
NUMBER(6)<139>
parentheses_operator(close)<140>
end_operator()<141>
state_specifier(private)<142>
type_specifier(hex[2])<143>
IDENTIFIER(globJ)<147>
assignment_operator(=)<148>
IDENTIFIER(new)<149>
IDENTIFIER(Array)<150>
return_type_operator()<151>
type_specifier(hex[2])<153>
parentheses_operator(open)<157>
NUMBER(8)<158>
separation_operator()<159>
NUMBER(2)<160>
parentheses_operator(close)<161>
end_operator()<162>
state_specifier(public)<163>
function_declarator()<164>
return_type_operator()<165>
type_specifier(int)<167>
IDENTIFIER(Main)<168>
parentheses_operator(open)<169>
type_specifier(string[1])<170>
IDENTIFIER(envi)<173>
separation_operator()<174>
type_specifier(int)<175>
IDENTIFIER(length)<176>
parentheses_operator(close)<177>
zone_operator(open)<178>
IDENTIFIER(Func)<179>
parentheses_operator(open)<180>
parentheses_operator(close)<181>
end_operator()<182>
type_specifier(^int)<183>
IDENTIFIER(a)<185>
assignment_operator(=)<186>
NUMBER(0)<187>
end_operator()<188>
type_specifier(int)<189>
IDENTIFIER(b)<190>
assignment_operator(=)<191>
NUMBER(1)<192>
end_operator()<193>
type_specifier(^int)<194>
IDENTIFIER(c)<196>
assignment_operator(=)<197>
IDENTIFIER(Test)<198>
parentheses_operator(open)<199>
IDENTIFIER(a)<200>
separation_operator()<201>
NUMBER(1)<202>
parentheses_operator(close)<203>
end_operator()<204>
IDENTIFIER(a)<205>
assignment_operator(=)<206>
NUMBER(1)<207>
separation_operator()<208>
IDENTIFIER(c)<209>
assignment_operator(=)<210>
NUMBER(5)<211>
end_operator()<212>
IDENTIFIER(PlusOne)<213>
parentheses_operator(open)<214>
ref_statement()<215>
IDENTIFIER(b)<216>
parentheses_operator(close)<217>
end_operator()<218>
type_specifier(bool)<219>
IDENTIFIER(myTest)<220>
assignment_operator(=)<221>
BOOLEAN(false)<222>
end_operator()<223>
if_statement()<224>
parentheses_operator(open)<225>
IDENTIFIER(myTest)<226>
comparison_operator(=)<227>
BOOLEAN(true)<229>
parentheses_operator(close)<230>
zone_operator(open)<231>
zone_operator(close)<232>
else_statement()<233>
zone_operator(open)<234>
zone_operator(close)<235>
if_statement()<236>
parentheses_operator(open)<237>
IDENTIFIER(myTest)<238>
comparison_operator(!)<239>
BOOLEAN(true)<241>
parentheses_operator(close)<242>
zone_operator(open)<243>
zone_operator(close)<244>
if_statement()<245>
parentheses_operator(open)<246>
NUMBER(1)<247>
comparison_operator(>)<248>
NUMBER(5)<250>
comparison_operator(|)<251>
NUMBER(1)<253>
comparison_operator(~>)<254>
NUMBER(5)<255>
comparison_operator(|)<256>
parentheses_operator(open)<258>
NUMBER(1)<259>
comparison_operator(~>)<260>
NUMBER(1)<261>
comparison_operator(&)<262>
NUMBER(1)<264>
comparison_operator(~<)<265>
NUMBER(1)<266>
parentheses_operator(close)<267>
parentheses_operator(close)<268>
zone_operator(open)<269>
zone_operator(close)<270>
if_statement()<271>
parentheses_operator(open)<272>
NUMBER(1)<273>
comparison_operator(<)<274>
NUMBER(5)<276>
comparison_operator(|)<277>
NUMBER(1)<279>
comparison_operator(~<)<280>
NUMBER(5)<281>
parentheses_operator(close)<282>
zone_operator(open)<283>
zone_operator(close)<284>
return_statement()<285>
NUMBER(0)<286>
end_operator()<287>
zone_operator(close)<288>
state_specifier(private)<289>
function_declarator()<290>
return_type_operator()<291>
type_specifier(void)<293>
IDENTIFIER(Func)<294>
parentheses_operator(open)<295>
parentheses_operator(close)<296>
zone_operator(open)<297>
zone_operator(close)<298>
state_specifier(public)<299>
function_declarator()<300>
return_type_operator()<301>
type_specifier(^int)<303>
IDENTIFIER(Test)<305>
parentheses_operator(open)<306>
type_specifier(^int)<307>
IDENTIFIER(a)<309>
separation_operator()<310>
type_specifier(int)<311>
IDENTIFIER(b)<312>
parentheses_operator(close)<313>
zone_operator(open)<314>
IDENTIFIER(a)<315>
assignment_operator(=)<316>
parentheses_operator(open)<317>
type_specifier(^int)<318>
parentheses_operator(close)<320>
IDENTIFIER(b)<321>
end_operator()<322>
return_statement()<323>
IDENTIFIER(a)<324>
end_operator()<325>
zone_operator(close)<326>
state_specifier(public)<327>
function_declarator()<328>
return_type_operator()<329>
type_specifier(void)<331>
IDENTIFIER(PlusOne)<332>
parentheses_operator(open)<333>
ref_statement()<334>
type_specifier(int)<335>
IDENTIFIER(a)<336>
parentheses_operator(close)<337>
zone_operator(open)<338>
IDENTIFIER(a)<339>
assignment_short_operator(+)<340>
end_operator()<342>
zone_operator(close)<343>
state_specifier(public)<344>
function_declarator()<345>
return_type_operator()<346>
type_specifier(void)<348>
IDENTIFIER(myTests)<349>
parentheses_operator(open)<350>
parentheses_operator(close)<351>
zone_operator(open)<352>
type_specifier(bool)<353>
IDENTIFIER(myTest)<354>
assignment_operator(=)<355>
BOOLEAN(false)<356>
end_operator()<357>
type_specifier(int)<358>
IDENTIFIER(a)<359>
assignment_operator(=)<360>
NUMBER(0)<361>
separation_operator()<362>
IDENTIFIER(b)<363>
assignment_operator(=)<364>
NUMBER(0)<365>
end_operator()<366>
type_specifier(double)<367>
IDENTIFIER(c)<368>
assignment_operator(=)<369>
NUMBER(4)<370>
separation_operator()<371>
IDENTIFIER(d)<372>
assignment_operator(=)<373>
NUMBER(3)<374>
end_operator()<375>
IDENTIFIER(myTest)<376>
assignment_short_operator(!)<377>
end_operator()<379>
IDENTIFIER(myTest)<380>
assignment_operator(=)<381>
negative_operator()<382>
IDENTIFIER(myTest)<383>
end_operator()<384>
IDENTIFIER(a)<385>
assignment_short_operator(+)<386>
end_operator()<388>
IDENTIFIER(a)<389>
assignment_operator(+)<390>
NUMBER(1)<392>
end_operator()<393>
IDENTIFIER(a)<394>
assignment_operator(=)<395>
IDENTIFIER(a)<396>
maths_operator(+)<397>
NUMBER(1)<398>
end_operator()<399>
IDENTIFIER(b)<400>
assignment_short_operator(-)<401>
end_operator()<403>
IDENTIFIER(b)<404>
assignment_operator(-)<405>
NUMBER(1)<407>
end_operator()<408>
IDENTIFIER(b)<409>
assignment_operator(=)<410>
IDENTIFIER(b)<411>
maths_operator(-)<412>
NUMBER(1)<413>
end_operator()<414>
IDENTIFIER(c)<415>
assignment_operator(%)<416>
IDENTIFIER(d)<418>
end_operator()<419>
IDENTIFIER(c)<420>
maths_operator(%)<421>
IDENTIFIER(d)<422>
end_operator()<423>
IDENTIFIER(c)<424>
assignment_operator(/)<425>
DECNUMBER(0.5)<427>
end_operator()<428>
IDENTIFIER(c)<429>
maths_operator(/)<430>
IDENTIFIER(d)<431>
end_operator()<432>
IDENTIFIER(c)<433>
assignment_operator(*)<434>
IDENTIFIER(d)<436>
end_operator()<437>
IDENTIFIER(c)<438>
assignment_operator(=)<439>
IDENTIFIER(c)<440>
maths_operator(*)<441>
IDENTIFIER(d)<442>
end_operator()<443>
zone_operator(close)<444>
function_declarator()<445>
return_type_operator()<446>
type_specifier(string)<448>
IDENTIFIER(myStringTest)<449>
parentheses_operator(open)<450>
type_specifier(string)<451>
IDENTIFIER(a)<452>
parentheses_operator(close)<453>
zone_operator(open)<454>
type_specifier(string)<455>
IDENTIFIER(b)<456>
assignment_operator(=)<457>
STRING(Hi!)<458>
end_operator()<459>
delete_statement()<460>
IDENTIFIER(b)<461>
end_operator()<462>
type_specifier(int)<463>
IDENTIFIER(b)<464>
assignment_operator(=)<465>
NUMBER(1)<466>
end_operator()<467>
zone_operator(close)<468>
function_declarator()<469>
return_type_operator()<470>
type_specifier(hex[2])<472>
IDENTIFIER(ReturnHexArray)<476>
parentheses_operator(open)<477>
parentheses_operator(close)<478>
zone_operator(open)<479>
return_statement()<480>
IDENTIFIER(this)<481>
dot_operator()<482>
IDENTIFIER(globJ)<483>
end_operator()<484>
zone_operator(close)<485>
zone_operator(close)<486>
state_specifier(public)<487>
class_declarator()<488>
IDENTIFIER(AnotherClass)<489>
zone_operator(open)<490>
state_specifier(public)<491>
type_specifier(int)<492>
IDENTIFIER(a)<493>
assignment_operator(=)<494>
NUMBER(0)<495>
end_operator()<496>
state_specifier(private)<497>
type_specifier(int)<498>
IDENTIFIER(b)<499>
assignment_operator(=)<500>
NUMBER(0)<501>
end_operator()<502>
function_declarator()<503>
return_type_operator()<504>
IDENTIFIER(AnotherClass)<506>
IDENTIFIER(Construct)<507>
parentheses_operator(open)<508>
type_specifier(int)<509>
IDENTIFIER(a)<510>
separation_operator()<511>
type_specifier(int)<512>
IDENTIFIER(b)<513>
parentheses_operator(close)<514>
zone_operator(open)<515>
IDENTIFIER(this)<516>
dot_operator()<517>
IDENTIFIER(a)<518>
assignment_operator(=)<519>
IDENTIFIER(a)<520>
end_operator()<521>
IDENTIFIER(this)<522>
dot_operator()<523>
IDENTIFIER(b)<524>
assignment_operator(=)<525>
IDENTIFIER(b)<526>
end_operator()<527>
zone_operator(close)<528>
zone_operator(close)<529>
class_declarator()<530>
IDENTIFIER(Smth)<531>
zone_operator(open)<532>
zone_operator(close)<533>
zone_operator(close)<534>
