STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
group_declarator()<5>
IDENTIFIER(AnotherLibrary)<6>
zone_operator(open)<7>
class_declarator()<8>
IDENTIFIER(MyClass)<9>
zone_operator(open)<10>
function_declarator()<11>
info_operator()<12>
type_specifier(int)<13>
IDENTIFIER(NumOne)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
end_operator()<20>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
group_declarator()<24>
state_operator()<25>
state_specifier(public)<27>
IDENTIFIER(LibFilNam)<28>
zone_operator(open)<29>
class_declarator()<30>
state_operator()<31>
state_specifier(public)<33>
IDENTIFIER(section)<34>
zone_operator(open)<35>
function_declarator()<36>
info_operator()<37>
type_specifier(string)<38>
IDENTIFIER(myFunction)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
variable_declarator()<46>
info_operator()<47>
type_specifier(string)<48>
IDENTIFIER(output)<49>
end_operator()<50>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
end_operator()<54>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
IDENTIFIER(define)<58>
IDENTIFIER(ZERO)<59>
NUMBER(0)<60>
end_operator()<61>
setsize_statement()<62>
type_specifier(int)<63>
NUMBER(2)<64>
end_operator()<65>
setsize_statement()<66>
type_specifier(double)<67>
NUMBER(10)<68>
end_operator()<69>
group_declarator()<70>
state_operator()<71>
state_specifier(public)<73>
IDENTIFIER(FinalPitch)<74>
zone_operator(open)<75>
class_declarator()<76>
state_operator()<77>
state_specifier(public)<79>
IDENTIFIER(Program)<80>
zone_operator(open)<81>
variable_declarator()<82>
state_operator()<83>
state_specifier(public)<85>
info_operator()<86>
type_specifier(int)<87>
IDENTIFIER(globA)<88>
assignment_operator(=)<89>
NUMBER(0)<90>
end_operator()<91>
variable_declarator()<92>
state_operator()<93>
state_specifier(public)<95>
info_operator()<96>
type_specifier(double)<97>
IDENTIFIER(globB)<98>
assignment_operator(=)<99>
DECNUMBER(0.0)<100>
end_operator()<101>
variable_declarator()<102>
state_operator()<103>
state_specifier(public)<105>
info_operator()<106>
type_specifier(float)<107>
IDENTIFIER(globC)<108>
assignment_operator(=)<109>
DECNUMBER(0.0)<110>
end_operator()<111>
variable_declarator()<112>
state_operator()<113>
state_specifier(public)<115>
info_operator()<116>
type_specifier(char)<117>
IDENTIFIER(globD)<118>
assignment_operator(=)<119>
CHAR(D)<120>
end_operator()<121>
variable_declarator()<122>
state_operator()<123>
state_specifier(public)<125>
info_operator()<126>
type_specifier(string)<127>
IDENTIFIER(globE)<128>
assignment_operator(=)<129>
STRING(Global E)<130>
end_operator()<131>
variable_declarator()<132>
state_operator()<133>
state_specifier(public)<135>
info_operator()<136>
type_specifier(bool)<137>
IDENTIFIER(globF)<138>
assignment_operator(=)<139>
BOOLEAN(true)<140>
end_operator()<141>
variable_declarator()<142>
state_operator()<143>
state_specifier(public)<145>
info_operator()<146>
type_specifier(file)<147>
IDENTIFIER(globG)<148>
assignment_operator(=)<149>
IDENTIFIER(new)<150>
IDENTIFIER(FileStream)<151>
parentheses_operator(open)<152>
STRING(path/to/my/file.txt)<153>
parentheses_operator(close)<154>
end_operator()<155>
variable_declarator()<156>
state_operator()<157>
state_specifier(public)<159>
info_operator()<160>
type_specifier(hex)<161>
IDENTIFIER(globH)<162>
assignment_operator(=)<163>
HEX(FF)<164>
end_operator()<165>
variable_declarator()<166>
state_operator()<167>
state_specifier(public)<169>
info_operator()<170>
type_specifier(string[1])<171>
IDENTIFIER(globI)<174>
assignment_operator(=)<175>
IDENTIFIER(new)<176>
IDENTIFIER(Array)<177>
info_operator()<178>
type_specifier(string[1])<179>
parentheses_operator(open)<182>
NUMBER(6)<183>
parentheses_operator(close)<184>
end_operator()<185>
variable_declarator()<186>
state_operator()<187>
state_specifier(private)<189>
info_operator()<190>
type_specifier(hex[2])<191>
IDENTIFIER(globJ)<195>
assignment_operator(=)<196>
IDENTIFIER(new)<197>
IDENTIFIER(Array)<198>
info_operator()<199>
type_specifier(hex[2])<200>
parentheses_operator(open)<204>
NUMBER(8)<205>
separation_operator()<206>
NUMBER(2)<207>
parentheses_operator(close)<208>
end_operator()<209>
function_declarator()<210>
state_operator()<211>
state_specifier(public)<213>
info_operator()<214>
type_specifier(int)<215>
IDENTIFIER(Main)<216>
parentheses_operator(open)<217>
IDENTIFIER(envi)<218>
info_operator()<219>
type_specifier(string[1])<220>
separation_operator()<223>
IDENTIFIER(length)<224>
info_operator()<225>
type_specifier(int)<226>
parentheses_operator(close)<227>
zone_operator(open)<228>
IDENTIFIER(Func)<229>
parentheses_operator(open)<230>
parentheses_operator(close)<231>
end_operator()<232>
variable_declarator()<233>
info_operator()<234>
type_specifier(^int)<235>
IDENTIFIER(a)<237>
assignment_operator(=)<238>
NUMBER(0)<239>
end_operator()<240>
variable_declarator()<241>
info_operator()<242>
type_specifier(int)<243>
IDENTIFIER(b)<244>
assignment_operator(=)<245>
NUMBER(1)<246>
end_operator()<247>
variable_declarator()<248>
info_operator()<249>
type_specifier(^int)<250>
IDENTIFIER(c)<252>
assignment_operator(=)<253>
IDENTIFIER(Test)<254>
parentheses_operator(open)<255>
IDENTIFIER(a)<256>
separation_operator()<257>
NUMBER(1)<258>
parentheses_operator(close)<259>
end_operator()<260>
IDENTIFIER(a)<261>
assignment_operator(=)<262>
NUMBER(1)<263>
separation_operator()<264>
IDENTIFIER(c)<265>
assignment_operator(=)<266>
NUMBER(5)<267>
end_operator()<268>
IDENTIFIER(PlusOne)<269>
parentheses_operator(open)<270>
IDENTIFIER(b)<271>
info_operator()<272>
ref_statement()<273>
parentheses_operator(close)<274>
end_operator()<275>
variable_declarator()<276>
info_operator()<277>
type_specifier(bool)<278>
IDENTIFIER(myTest)<279>
assignment_operator(=)<280>
BOOLEAN(false)<281>
end_operator()<282>
if_statement()<283>
parentheses_operator(open)<284>
IDENTIFIER(myTest)<285>
comparison_operator(=)<286>
BOOLEAN(true)<288>
parentheses_operator(close)<289>
zone_operator(open)<290>
zone_operator(close)<291>
else_statement()<292>
zone_operator(open)<293>
zone_operator(close)<294>
if_statement()<295>
parentheses_operator(open)<296>
IDENTIFIER(myTest)<297>
comparison_operator(!)<298>
BOOLEAN(true)<300>
parentheses_operator(close)<301>
zone_operator(open)<302>
zone_operator(close)<303>
if_statement()<304>
parentheses_operator(open)<305>
NUMBER(1)<306>
comparison_operator(>)<307>
NUMBER(5)<309>
comparison_operator(|)<310>
NUMBER(1)<312>
comparison_operator(~>)<313>
NUMBER(5)<314>
comparison_operator(|)<315>
parentheses_operator(open)<317>
NUMBER(1)<318>
comparison_operator(~>)<319>
NUMBER(1)<320>
comparison_operator(&)<321>
NUMBER(1)<323>
comparison_operator(~<)<324>
NUMBER(1)<325>
parentheses_operator(close)<326>
parentheses_operator(close)<327>
zone_operator(open)<328>
zone_operator(close)<329>
if_statement()<330>
parentheses_operator(open)<331>
NUMBER(1)<332>
comparison_operator(<)<333>
NUMBER(5)<335>
comparison_operator(|)<336>
NUMBER(1)<338>
comparison_operator(~<)<339>
NUMBER(5)<340>
parentheses_operator(close)<341>
zone_operator(open)<342>
zone_operator(close)<343>
return_statement()<344>
NUMBER(0)<345>
end_operator()<346>
zone_operator(close)<347>
function_declarator()<348>
state_operator()<349>
state_specifier(private)<351>
info_operator()<352>
type_specifier(void)<353>
IDENTIFIER(Func)<354>
parentheses_operator(open)<355>
parentheses_operator(close)<356>
zone_operator(open)<357>
zone_operator(close)<358>
function_declarator()<359>
state_operator()<360>
state_specifier(public)<362>
info_operator()<363>
type_specifier(^int)<364>
IDENTIFIER(Test)<366>
parentheses_operator(open)<367>
IDENTIFIER(a)<368>
info_operator()<369>
type_specifier(^int)<370>
separation_operator()<372>
IDENTIFIER(b)<373>
info_operator()<374>
type_specifier(int)<375>
parentheses_operator(close)<376>
zone_operator(open)<377>
IDENTIFIER(a)<378>
assignment_operator(=)<379>
parentheses_operator(open)<380>
type_specifier(^int)<381>
parentheses_operator(close)<383>
IDENTIFIER(b)<384>
end_operator()<385>
return_statement()<386>
IDENTIFIER(a)<387>
end_operator()<388>
zone_operator(close)<389>
function_declarator()<390>
state_operator()<391>
state_specifier(public)<393>
info_operator()<394>
type_specifier(void)<395>
IDENTIFIER(PlusOne)<396>
parentheses_operator(open)<397>
IDENTIFIER(a)<398>
info_operator()<399>
type_specifier(int)<400>
info_operator()<401>
ref_statement()<402>
parentheses_operator(close)<403>
zone_operator(open)<404>
IDENTIFIER(a)<405>
assignment_short_operator(+)<406>
end_operator()<408>
zone_operator(close)<409>
function_declarator()<410>
state_operator()<411>
state_specifier(public)<413>
info_operator()<414>
type_specifier(void)<415>
IDENTIFIER(myTests)<416>
parentheses_operator(open)<417>
parentheses_operator(close)<418>
zone_operator(open)<419>
variable_declarator()<420>
info_operator()<421>
type_specifier(bool)<422>
IDENTIFIER(myTest)<423>
assignment_operator(=)<424>
BOOLEAN(false)<425>
end_operator()<426>
variable_declarator()<427>
info_operator()<428>
type_specifier(int)<429>
IDENTIFIER(a)<430>
assignment_operator(=)<431>
NUMBER(0)<432>
separation_operator()<433>
IDENTIFIER(b)<434>
assignment_operator(=)<435>
NUMBER(0)<436>
end_operator()<437>
variable_declarator()<438>
info_operator()<439>
type_specifier(double)<440>
IDENTIFIER(c)<441>
assignment_operator(=)<442>
NUMBER(4)<443>
separation_operator()<444>
IDENTIFIER(d)<445>
assignment_operator(=)<446>
NUMBER(3)<447>
end_operator()<448>
IDENTIFIER(myTest)<449>
assignment_short_operator(!)<450>
end_operator()<452>
IDENTIFIER(myTest)<453>
assignment_operator(=)<454>
negative_operator()<455>
IDENTIFIER(myTest)<456>
end_operator()<457>
IDENTIFIER(a)<458>
assignment_short_operator(+)<459>
end_operator()<461>
IDENTIFIER(a)<462>
assignment_operator(+)<463>
NUMBER(1)<465>
end_operator()<466>
IDENTIFIER(a)<467>
assignment_operator(=)<468>
IDENTIFIER(a)<469>
maths_operator(+)<470>
NUMBER(1)<471>
end_operator()<472>
IDENTIFIER(b)<473>
assignment_short_operator(-)<474>
end_operator()<476>
IDENTIFIER(b)<477>
assignment_operator(-)<478>
NUMBER(1)<480>
end_operator()<481>
IDENTIFIER(b)<482>
assignment_operator(=)<483>
IDENTIFIER(b)<484>
maths_operator(-)<485>
NUMBER(1)<486>
end_operator()<487>
IDENTIFIER(c)<488>
assignment_operator(%)<489>
IDENTIFIER(d)<491>
end_operator()<492>
IDENTIFIER(c)<493>
maths_operator(%)<494>
IDENTIFIER(d)<495>
end_operator()<496>
IDENTIFIER(c)<497>
assignment_operator(/)<498>
DECNUMBER(0.5)<500>
end_operator()<501>
IDENTIFIER(c)<502>
maths_operator(/)<503>
IDENTIFIER(d)<504>
end_operator()<505>
IDENTIFIER(c)<506>
assignment_operator(*)<507>
IDENTIFIER(d)<509>
end_operator()<510>
IDENTIFIER(c)<511>
assignment_operator(=)<512>
IDENTIFIER(c)<513>
maths_operator(*)<514>
IDENTIFIER(d)<515>
end_operator()<516>
zone_operator(close)<517>
function_declarator()<518>
info_operator()<519>
type_specifier(string)<520>
IDENTIFIER(myStringTest)<521>
parentheses_operator(open)<522>
IDENTIFIER(a)<523>
info_operator()<524>
type_specifier(string)<525>
parentheses_operator(close)<526>
zone_operator(open)<527>
variable_declarator()<528>
info_operator()<529>
type_specifier(string)<530>
IDENTIFIER(b)<531>
assignment_operator(=)<532>
STRING(Hi!)<533>
end_operator()<534>
delete_statement()<535>
IDENTIFIER(b)<536>
end_operator()<537>
variable_declarator()<538>
info_operator()<539>
type_specifier(int)<540>
IDENTIFIER(b)<541>
assignment_operator(=)<542>
NUMBER(1)<543>
end_operator()<544>
zone_operator(close)<545>
function_declarator()<546>
info_operator()<547>
type_specifier(hex[2])<548>
IDENTIFIER(ReturnHexArray)<552>
parentheses_operator(open)<553>
parentheses_operator(close)<554>
zone_operator(open)<555>
return_statement()<556>
IDENTIFIER(this)<557>
dot_operator()<558>
IDENTIFIER(globJ)<559>
end_operator()<560>
zone_operator(close)<561>
zone_operator(close)<562>
class_declarator()<563>
state_operator()<564>
state_specifier(public)<566>
IDENTIFIER(AnotherClass)<567>
zone_operator(open)<568>
variable_declarator()<569>
state_operator()<570>
state_specifier(public)<572>
info_operator()<573>
type_specifier(int)<574>
IDENTIFIER(a)<575>
assignment_operator(=)<576>
NUMBER(0)<577>
end_operator()<578>
variable_declarator()<579>
state_operator()<580>
state_specifier(private)<582>
info_operator()<583>
type_specifier(int)<584>
IDENTIFIER(b)<585>
assignment_operator(=)<586>
NUMBER(0)<587>
end_operator()<588>
function_declarator()<589>
state_operator()<590>
state_specifier(public)<592>
info_operator()<593>
IDENTIFIER(AnotherClass)<594>
IDENTIFIER(Construct)<595>
parentheses_operator(open)<596>
IDENTIFIER(a)<597>
info_operator()<598>
type_specifier(int)<599>
separation_operator()<600>
IDENTIFIER(b)<601>
info_operator()<602>
type_specifier(int)<603>
parentheses_operator(close)<604>
zone_operator(open)<605>
IDENTIFIER(this)<606>
dot_operator()<607>
IDENTIFIER(a)<608>
assignment_operator(=)<609>
IDENTIFIER(a)<610>
end_operator()<611>
IDENTIFIER(this)<612>
dot_operator()<613>
IDENTIFIER(b)<614>
assignment_operator(=)<615>
IDENTIFIER(b)<616>
end_operator()<617>
zone_operator(close)<618>
zone_operator(close)<619>
class_declarator()<620>
IDENTIFIER(Smth)<621>
zone_operator(open)<622>
function_declarator()<623>
info_operator()<624>
type_specifier(void)<625>
IDENTIFIER(myTest)<626>
parentheses_operator(open)<627>
IDENTIFIER(a)<628>
info_operator()<629>
type_specifier(int)<630>
parentheses_operator(close)<631>
zone_operator(open)<632>
zone_operator(close)<633>
zone_operator(close)<634>
zone_operator(close)<635>
