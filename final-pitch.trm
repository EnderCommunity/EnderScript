STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
group_declarator()<5>
IDENTIFIER(AnotherLibrary)<6>
zone_operator(open)<7>
class_declarator()<8>
IDENTIFIER(MyClass)<9>
zone_operator(open)<10>
function_declarator()<11>
info_operator()<12>
type_specifier(int)<13>
IDENTIFIER(NumOne)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
end_operator()<20>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
group_declarator()<24>
state_operator()<25>
state_specifier(public)<27>
IDENTIFIER(LibFilNam)<28>
zone_operator(open)<29>
class_declarator()<30>
state_operator()<31>
state_specifier(public)<33>
IDENTIFIER(section)<34>
zone_operator(open)<35>
function_declarator()<36>
info_operator()<37>
type_specifier(string)<38>
IDENTIFIER(myFunction)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
variable_declarator()<46>
info_operator()<47>
type_specifier(string)<48>
IDENTIFIER(output)<49>
end_operator()<50>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
end_operator()<54>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
IDENTIFIER(define)<58>
IDENTIFIER(ZERO)<59>
NUMBER(0)<60>
end_operator()<61>
setsize_statement()<62>
type_specifier(int)<63>
NUMBER(2)<64>
end_operator()<65>
setsize_statement()<66>
type_specifier(double)<67>
NUMBER(10)<68>
end_operator()<69>
group_declarator()<70>
state_operator()<71>
state_specifier(public)<73>
IDENTIFIER(FinalPitch)<74>
zone_operator(open)<75>
class_declarator()<76>
state_operator()<77>
state_specifier(public)<79>
IDENTIFIER(Program)<80>
zone_operator(open)<81>
variable_declarator()<82>
state_operator()<83>
state_specifier(public)<85>
info_operator()<86>
type_specifier(int)<87>
IDENTIFIER(globA)<88>
assignment_operator(=)<89>
NUMBER(0)<90>
end_operator()<91>
variable_declarator()<92>
state_operator()<93>
state_specifier(public)<95>
info_operator()<96>
type_specifier(double)<97>
IDENTIFIER(globB)<98>
assignment_operator(=)<99>
DECNUMBER(0.0)<100>
end_operator()<101>
variable_declarator()<102>
state_operator()<103>
state_specifier(public)<105>
info_operator()<106>
type_specifier(float)<107>
IDENTIFIER(globC)<108>
assignment_operator(=)<109>
DECNUMBER(0.0)<110>
end_operator()<111>
variable_declarator()<112>
state_operator()<113>
state_specifier(public)<115>
info_operator()<116>
type_specifier(char)<117>
IDENTIFIER(globD)<118>
assignment_operator(=)<119>
CHAR(D)<120>
end_operator()<121>
variable_declarator()<122>
state_operator()<123>
state_specifier(public)<125>
info_operator()<126>
type_specifier(string)<127>
IDENTIFIER(globE)<128>
assignment_operator(=)<129>
STRING(Global E)<130>
end_operator()<131>
variable_declarator()<132>
state_operator()<133>
state_specifier(public)<135>
info_operator()<136>
type_specifier(bool)<137>
IDENTIFIER(globF)<138>
assignment_operator(=)<139>
BOOLEAN(true)<140>
end_operator()<141>
variable_declarator()<142>
state_operator()<143>
state_specifier(public)<145>
info_operator()<146>
type_specifier(file)<147>
IDENTIFIER(globG)<148>
assignment_operator(=)<149>
IDENTIFIER(new)<150>
IDENTIFIER(FileStream)<151>
parentheses_operator(open)<152>
STRING(path/to/my/file.txt)<153>
parentheses_operator(close)<154>
end_operator()<155>
variable_declarator()<156>
state_operator()<157>
state_specifier(public)<159>
info_operator()<160>
type_specifier(hex)<161>
IDENTIFIER(globH)<162>
assignment_operator(=)<163>
HEX(FF)<164>
end_operator()<165>
variable_declarator()<166>
state_operator()<167>
state_specifier(public)<169>
info_operator()<170>
type_specifier(string[1])<171>
IDENTIFIER(globI)<174>
assignment_operator(=)<175>
IDENTIFIER(new)<176>
IDENTIFIER(Array)<177>
info_operator()<178>
type_specifier(string[1])<179>
parentheses_operator(open)<182>
NUMBER(6)<183>
parentheses_operator(close)<184>
end_operator()<185>
variable_declarator()<186>
state_operator()<187>
state_specifier(private)<189>
info_operator()<190>
type_specifier(hex[2])<191>
IDENTIFIER(globJ)<195>
assignment_operator(=)<196>
IDENTIFIER(new)<197>
IDENTIFIER(Array)<198>
info_operator()<199>
type_specifier(hex[2])<200>
parentheses_operator(open)<204>
NUMBER(8)<205>
separation_operator()<206>
NUMBER(2)<207>
parentheses_operator(close)<208>
end_operator()<209>
function_declarator()<210>
state_operator()<211>
state_specifier(public)<213>
info_operator()<214>
type_specifier(int)<215>
IDENTIFIER(Main)<216>
parentheses_operator(open)<217>
IDENTIFIER(envi)<218>
info_operator()<219>
type_specifier(string[1])<220>
separation_operator()<223>
IDENTIFIER(length)<224>
info_operator()<225>
type_specifier(int)<226>
parentheses_operator(close)<227>
zone_operator(open)<228>
IDENTIFIER(Func)<229>
parentheses_operator(open)<230>
parentheses_operator(close)<231>
end_operator()<232>
variable_declarator()<233>
info_operator()<234>
type_specifier(^int)<235>
IDENTIFIER(a)<237>
assignment_operator(=)<238>
NUMBER(0)<239>
end_operator()<240>
variable_declarator()<241>
info_operator()<242>
type_specifier(int)<243>
IDENTIFIER(b)<244>
assignment_operator(=)<245>
NUMBER(1)<246>
end_operator()<247>
variable_declarator()<248>
info_operator()<249>
type_specifier(^int)<250>
IDENTIFIER(c)<252>
assignment_operator(=)<253>
IDENTIFIER(Test)<254>
parentheses_operator(open)<255>
IDENTIFIER(a)<256>
separation_operator()<257>
NUMBER(1)<258>
parentheses_operator(close)<259>
end_operator()<260>
IDENTIFIER(a)<261>
assignment_operator(=)<262>
NUMBER(1)<263>
separation_operator()<264>
IDENTIFIER(c)<265>
assignment_operator(=)<266>
NUMBER(5)<267>
end_operator()<268>
IDENTIFIER(PlusOne)<269>
parentheses_operator(open)<270>
IDENTIFIER(b)<271>
info_operator()<272>
ref_statement()<273>
parentheses_operator(close)<274>
end_operator()<275>
variable_declarator()<276>
info_operator()<277>
type_specifier(bool)<278>
IDENTIFIER(myTest)<279>
assignment_operator(=)<280>
BOOLEAN(false)<281>
end_operator()<282>
if_statement()<283>
parentheses_operator(open)<284>
IDENTIFIER(myTest)<285>
comparison_operator(=)<286>
BOOLEAN(true)<288>
parentheses_operator(close)<289>
zone_operator(open)<290>
zone_operator(close)<291>
else_statement()<292>
zone_operator(open)<293>
zone_operator(close)<294>
if_statement()<295>
parentheses_operator(open)<296>
IDENTIFIER(myTest)<297>
comparison_operator(!)<298>
BOOLEAN(true)<300>
parentheses_operator(close)<301>
zone_operator(open)<302>
zone_operator(close)<303>
if_statement()<304>
parentheses_operator(open)<305>
NUMBER(1)<306>
comparison_operator(>)<307>
NUMBER(5)<309>
comparison_operator(|)<310>
NUMBER(1)<312>
comparison_operator(~>)<313>
NUMBER(5)<314>
comparison_operator(|)<315>
parentheses_operator(open)<317>
NUMBER(1)<318>
comparison_operator(~>)<319>
NUMBER(1)<320>
comparison_operator(&)<321>
NUMBER(1)<323>
comparison_operator(~<)<324>
NUMBER(1)<325>
parentheses_operator(close)<326>
parentheses_operator(close)<327>
zone_operator(open)<328>
zone_operator(close)<329>
if_statement()<330>
parentheses_operator(open)<331>
NUMBER(1)<332>
comparison_operator(<)<333>
NUMBER(5)<335>
comparison_operator(|)<336>
NUMBER(1)<338>
comparison_operator(~<)<339>
NUMBER(5)<340>
parentheses_operator(close)<341>
zone_operator(open)<342>
zone_operator(close)<343>
return_statement()<344>
NUMBER(0)<345>
end_operator()<346>
zone_operator(close)<347>
function_declarator()<348>
state_operator()<349>
state_specifier(private)<351>
info_operator()<352>
type_specifier(void)<353>
IDENTIFIER(Func)<354>
parentheses_operator(open)<355>
parentheses_operator(close)<356>
zone_operator(open)<357>
zone_operator(close)<358>
function_declarator()<359>
state_operator()<360>
state_specifier(public)<362>
info_operator()<363>
type_specifier(^int)<364>
IDENTIFIER(Test)<366>
parentheses_operator(open)<367>
IDENTIFIER(a)<368>
state_operator()<369>
type_specifier(^int)<371>
separation_operator()<373>
IDENTIFIER(b)<374>
state_operator()<375>
type_specifier(int)<377>
parentheses_operator(close)<378>
zone_operator(open)<379>
IDENTIFIER(a)<380>
assignment_operator(=)<381>
parentheses_operator(open)<382>
type_specifier(^int)<383>
parentheses_operator(close)<385>
IDENTIFIER(b)<386>
end_operator()<387>
return_statement()<388>
IDENTIFIER(a)<389>
end_operator()<390>
zone_operator(close)<391>
function_declarator()<392>
state_operator()<393>
state_specifier(public)<395>
info_operator()<396>
type_specifier(void)<397>
IDENTIFIER(PlusOne)<398>
parentheses_operator(open)<399>
IDENTIFIER(a)<400>
state_operator()<401>
type_specifier(int)<403>
info_operator()<404>
ref_statement()<405>
parentheses_operator(close)<406>
zone_operator(open)<407>
IDENTIFIER(a)<408>
assignment_short_operator(+)<409>
end_operator()<411>
zone_operator(close)<412>
function_declarator()<413>
state_operator()<414>
state_specifier(public)<416>
info_operator()<417>
type_specifier(void)<418>
IDENTIFIER(myTests)<419>
parentheses_operator(open)<420>
parentheses_operator(close)<421>
zone_operator(open)<422>
variable_declarator()<423>
info_operator()<424>
type_specifier(bool)<425>
IDENTIFIER(myTest)<426>
assignment_operator(=)<427>
BOOLEAN(false)<428>
end_operator()<429>
variable_declarator()<430>
info_operator()<431>
type_specifier(int)<432>
IDENTIFIER(a)<433>
assignment_operator(=)<434>
NUMBER(0)<435>
separation_operator()<436>
IDENTIFIER(b)<437>
assignment_operator(=)<438>
NUMBER(0)<439>
end_operator()<440>
variable_declarator()<441>
info_operator()<442>
type_specifier(double)<443>
IDENTIFIER(c)<444>
assignment_operator(=)<445>
NUMBER(4)<446>
separation_operator()<447>
IDENTIFIER(d)<448>
assignment_operator(=)<449>
NUMBER(3)<450>
end_operator()<451>
IDENTIFIER(myTest)<452>
assignment_short_operator(!)<453>
end_operator()<455>
IDENTIFIER(myTest)<456>
assignment_operator(=)<457>
negative_operator()<458>
IDENTIFIER(myTest)<459>
end_operator()<460>
IDENTIFIER(a)<461>
assignment_short_operator(+)<462>
end_operator()<464>
IDENTIFIER(a)<465>
assignment_operator(+)<466>
NUMBER(1)<468>
end_operator()<469>
IDENTIFIER(a)<470>
assignment_operator(=)<471>
IDENTIFIER(a)<472>
maths_operator(+)<473>
NUMBER(1)<474>
end_operator()<475>
IDENTIFIER(b)<476>
assignment_short_operator(-)<477>
end_operator()<479>
IDENTIFIER(b)<480>
assignment_operator(-)<481>
NUMBER(1)<483>
end_operator()<484>
IDENTIFIER(b)<485>
assignment_operator(=)<486>
IDENTIFIER(b)<487>
maths_operator(-)<488>
NUMBER(1)<489>
end_operator()<490>
IDENTIFIER(c)<491>
assignment_operator(%)<492>
IDENTIFIER(d)<494>
end_operator()<495>
IDENTIFIER(c)<496>
maths_operator(%)<497>
IDENTIFIER(d)<498>
end_operator()<499>
IDENTIFIER(c)<500>
assignment_operator(/)<501>
DECNUMBER(0.5)<503>
end_operator()<504>
IDENTIFIER(c)<505>
maths_operator(/)<506>
IDENTIFIER(d)<507>
end_operator()<508>
IDENTIFIER(c)<509>
assignment_operator(*)<510>
IDENTIFIER(d)<512>
end_operator()<513>
IDENTIFIER(c)<514>
assignment_operator(=)<515>
IDENTIFIER(c)<516>
maths_operator(*)<517>
IDENTIFIER(d)<518>
end_operator()<519>
zone_operator(close)<520>
function_declarator()<521>
info_operator()<522>
type_specifier(string)<523>
IDENTIFIER(myStringTest)<524>
parentheses_operator(open)<525>
IDENTIFIER(a)<526>
state_operator()<527>
type_specifier(string)<529>
parentheses_operator(close)<530>
zone_operator(open)<531>
variable_declarator()<532>
info_operator()<533>
type_specifier(string)<534>
IDENTIFIER(b)<535>
assignment_operator(=)<536>
STRING(Hi!)<537>
end_operator()<538>
delete_statement()<539>
IDENTIFIER(b)<540>
end_operator()<541>
variable_declarator()<542>
info_operator()<543>
type_specifier(int)<544>
IDENTIFIER(b)<545>
assignment_operator(=)<546>
NUMBER(1)<547>
end_operator()<548>
zone_operator(close)<549>
function_declarator()<550>
info_operator()<551>
type_specifier(hex[2])<552>
IDENTIFIER(ReturnHexArray)<556>
parentheses_operator(open)<557>
parentheses_operator(close)<558>
zone_operator(open)<559>
return_statement()<560>
IDENTIFIER(this)<561>
dot_operator()<562>
IDENTIFIER(globJ)<563>
end_operator()<564>
zone_operator(close)<565>
zone_operator(close)<566>
class_declarator()<567>
state_operator()<568>
state_specifier(public)<570>
IDENTIFIER(AnotherClass)<571>
zone_operator(open)<572>
variable_declarator()<573>
state_operator()<574>
state_specifier(public)<576>
info_operator()<577>
type_specifier(int)<578>
IDENTIFIER(a)<579>
assignment_operator(=)<580>
NUMBER(0)<581>
end_operator()<582>
variable_declarator()<583>
state_operator()<584>
state_specifier(private)<586>
info_operator()<587>
type_specifier(int)<588>
IDENTIFIER(b)<589>
assignment_operator(=)<590>
NUMBER(0)<591>
end_operator()<592>
function_declarator()<593>
state_operator()<594>
state_specifier(public)<596>
info_operator()<597>
IDENTIFIER(AnotherClass)<598>
IDENTIFIER(Construct)<599>
parentheses_operator(open)<600>
IDENTIFIER(a)<601>
info_operator()<602>
type_specifier(int)<603>
separation_operator()<604>
IDENTIFIER(b)<605>
info_operator()<606>
type_specifier(int)<607>
parentheses_operator(close)<608>
zone_operator(open)<609>
IDENTIFIER(this)<610>
dot_operator()<611>
IDENTIFIER(a)<612>
assignment_operator(=)<613>
IDENTIFIER(a)<614>
end_operator()<615>
IDENTIFIER(this)<616>
dot_operator()<617>
IDENTIFIER(b)<618>
assignment_operator(=)<619>
IDENTIFIER(b)<620>
end_operator()<621>
zone_operator(close)<622>
zone_operator(close)<623>
class_declarator()<624>
IDENTIFIER(Smth)<625>
zone_operator(open)<626>
function_declarator()<627>
info_operator()<628>
type_specifier(void)<629>
IDENTIFIER(myTest)<630>
parentheses_operator(open)<631>
IDENTIFIER(a)<632>
info_operator()<633>
type_specifier(int)<634>
parentheses_operator(close)<635>
zone_operator(open)<636>
zone_operator(close)<637>
zone_operator(close)<638>
zone_operator(close)<639>
