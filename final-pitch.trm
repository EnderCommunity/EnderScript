STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
group_declarator()<5>
IDENTIFIER(AnotherLibrary)<6>
zone_operator({)<7>
class_declarator()<8>
IDENTIFIER(MyClass)<9>
zone_operator({)<10>
function_declarator()<11>
return_type_operator()<12>
type_specifier(int)<14>
IDENTIFIER(NumOne)<15>
parentheses_operator(()<16>
parentheses_operator())<17>
zone_operator({)<18>
return_statement()<19>
NUMBER(1)<20>
end_operator()<21>
zone_operator(})<22>
zone_operator(})<23>
zone_operator(})<24>
state_specifier(public)<25>
group_declarator()<26>
IDENTIFIER(LibFilNam)<27>
zone_operator({)<28>
state_specifier(public)<29>
class_declarator()<30>
IDENTIFIER(section)<31>
zone_operator({)<32>
function_declarator()<33>
return_type_operator()<34>
type_specifier(string)<36>
IDENTIFIER(myFunction)<37>
parentheses_operator(()<38>
type_specifier(int)<39>
IDENTIFIER(input)<40>
parentheses_operator())<41>
zone_operator({)<42>
type_specifier(string)<43>
IDENTIFIER(output)<44>
end_operator()<45>
ZONE_LINE(0;)<46>
return_statement()<47>
IDENTIFIER(output)<48>
end_operator()<49>
zone_operator(})<50>
zone_operator(})<51>
zone_operator(})<52>
IDENTIFIER(define)<53>
IDENTIFIER(ZERO)<54>
NUMBER(0)<55>
end_operator()<56>
IDENTIFIER(setsize)<57>
type_specifier(int)<58>
NUMBER(2)<59>
end_operator()<60>
IDENTIFIER(setsize)<61>
type_specifier(double)<62>
NUMBER(10)<63>
end_operator()<64>
state_specifier(public)<65>
group_declarator()<66>
IDENTIFIER(FinalPitch)<67>
zone_operator({)<68>
state_specifier(public)<69>
class_declarator()<70>
IDENTIFIER(Program)<71>
zone_operator({)<72>
type_specifier(int)<73>
IDENTIFIER(globA)<74>
assignment_operator(=)<75>
NUMBER(0)<76>
end_operator()<77>
type_specifier(double)<78>
IDENTIFIER(globB)<79>
assignment_operator(=)<80>
NUMBER(0.0)<81>
end_operator()<82>
IDENTIFIER(float)<83>
IDENTIFIER(globC)<84>
assignment_operator(=)<85>
NUMBER(0.0)<86>
end_operator()<87>
type_specifier(char)<88>
IDENTIFIER(globD)<89>
assignment_operator(=)<90>
CHAR(D)<91>
end_operator()<92>
type_specifier(string)<93>
IDENTIFIER(globE)<94>
assignment_operator(=)<95>
STRING(Global E)<96>
end_operator()<97>
type_specifier(bool)<98>
IDENTIFIER(globF)<99>
assignment_operator(=)<100>
BOOLEAN(true)<101>
end_operator()<102>
type_specifier(file)<103>
IDENTIFIER(globG)<104>
assignment_operator(=)<105>
IDENTIFIER(new)<106>
IDENTIFIER(FileStream)<107>
parentheses_operator(()<108>
STRING(path/to/my/file.txt)<109>
parentheses_operator())<110>
end_operator()<111>
state_specifier(public)<112>
function_declarator()<113>
return_type_operator()<114>
type_specifier(int)<116>
IDENTIFIER(Main)<117>
parentheses_operator(()<118>
type_specifier(string)<119>
array_operator([)<120>
array_operator(])<121>
IDENTIFIER(envi)<122>
separation_operator()<123>
type_specifier(int)<124>
IDENTIFIER(length)<125>
parentheses_operator())<126>
zone_operator({)<127>
IDENTIFIER(Func)<128>
parentheses_operator(()<129>
parentheses_operator())<130>
end_operator()<131>
elevational_operator()<132>
type_specifier(int)<133>
IDENTIFIER(a)<134>
assignment_operator(=)<135>
NUMBER(0)<136>
end_operator()<137>
type_specifier(int)<138>
IDENTIFIER(b)<139>
assignment_operator(=)<140>
NUMBER(1)<141>
end_operator()<142>
elevational_operator()<143>
type_specifier(int)<144>
IDENTIFIER(c)<145>
assignment_operator(=)<146>
IDENTIFIER(Test)<147>
parentheses_operator(()<148>
IDENTIFIER(a)<149>
separation_operator()<150>
NUMBER(1)<151>
parentheses_operator())<152>
end_operator()<153>
IDENTIFIER(a)<154>
separation_operator()<155>
IDENTIFIER(c)<156>
assignment_operator(=)<157>
NUMBER(5)<158>
end_operator()<159>
IDENTIFIER(PlusOne)<160>
parentheses_operator(()<161>
ref_statement()<162>
IDENTIFIER(b)<163>
parentheses_operator())<164>
parentheses_operator(()<165>
ref_statement()<166>
IDENTIFIER(b)<167>
parentheses_operator())<168>
end_operator()<169>
type_specifier(bool)<170>
IDENTIFIER(myTest)<171>
assignment_operator(=)<172>
BOOLEAN(false)<173>
end_operator()<174>
IDENTIFIER(if)<175>
parentheses_operator(()<176>
IDENTIFIER(myTest)<177>
comparison_operator(=)<178>
BOOLEAN(true)<180>
parentheses_operator())<181>
zone_operator({)<182>
zone_operator(})<183>
IDENTIFIER(if)<184>
parentheses_operator(()<185>
IDENTIFIER(myTest)<186>
comparison_operator(!)<187>
BOOLEAN(true)<189>
parentheses_operator())<190>
zone_operator({)<191>
zone_operator(})<192>
IDENTIFIER(if)<193>
parentheses_operator(()<194>
NUMBER(1)<195>
comparison_operator(>)<196>
NUMBER(5)<198>
comparison_operator(|)<199>
NUMBER(1)<201>
comparison_operator(~>)<202>
NUMBER(5)<203>
comparison_operator(|)<204>
parentheses_operator(()<206>
NUMBER(1)<207>
comparison_operator(~>)<208>
NUMBER(1)<209>
comparison_operator(&)<210>
NUMBER(1)<212>
comparison_operator(~<)<213>
NUMBER(1)<214>
parentheses_operator())<215>
parentheses_operator())<216>
zone_operator({)<217>
zone_operator(})<218>
IDENTIFIER(if)<219>
parentheses_operator(()<220>
NUMBER(1)<221>
comparison_operator(<)<222>
NUMBER(5)<224>
comparison_operator(|)<225>
NUMBER(1)<227>
comparison_operator(~<)<228>
NUMBER(5)<229>
parentheses_operator())<230>
zone_operator({)<231>
zone_operator(})<232>
return_statement()<233>
NUMBER(0)<234>
end_operator()<235>
zone_operator(})<236>
state_specifier(private)<237>
function_declarator()<238>
return_type_operator()<239>
type_specifier(void)<241>
IDENTIFIER(Func)<242>
parentheses_operator(()<243>
parentheses_operator())<244>
zone_operator({)<245>
zone_operator(})<246>
state_specifier(public)<247>
function_declarator()<248>
return_type_operator()<249>
elevational_operator()<251>
type_specifier(int)<252>
IDENTIFIER(Test)<253>
parentheses_operator(()<254>
elevational_operator()<255>
type_specifier(int)<256>
IDENTIFIER(a)<257>
separation_operator()<258>
type_specifier(int)<259>
IDENTIFIER(b)<260>
parentheses_operator())<261>
zone_operator({)<262>
IDENTIFIER(a)<263>
assignment_operator(=)<264>
parentheses_operator(()<265>
elevational_operator()<266>
type_specifier(int)<267>
parentheses_operator())<268>
IDENTIFIER(b)<269>
end_operator()<270>
return_statement()<271>
IDENTIFIER(a)<272>
end_operator()<273>
zone_operator(})<274>
state_specifier(public)<275>
function_declarator()<276>
return_type_operator()<277>
type_specifier(void)<279>
IDENTIFIER(PlusOne)<280>
parentheses_operator(()<281>
ref_statement()<282>
type_specifier(int)<283>
IDENTIFIER(a)<284>
parentheses_operator())<285>
zone_operator({)<286>
IDENTIFIER(a)<287>
assignment_short_operator(+)<288>
end_operator()<290>
zone_operator(})<291>
state_specifier(public)<292>
function_declarator()<293>
return_type_operator()<294>
type_specifier(void)<296>
IDENTIFIER(myTests)<297>
parentheses_operator(()<298>
parentheses_operator())<299>
zone_operator({)<300>
type_specifier(bool)<301>
IDENTIFIER(myTest)<302>
assignment_operator(=)<303>
BOOLEAN(false)<304>
end_operator()<305>
type_specifier(int)<306>
IDENTIFIER(a)<307>
assignment_operator(=)<308>
NUMBER(0)<309>
separation_operator()<310>
IDENTIFIER(b)<311>
assignment_operator(=)<312>
NUMBER(0)<313>
end_operator()<314>
type_specifier(double)<315>
IDENTIFIER(c)<316>
assignment_operator(=)<317>
NUMBER(4)<318>
separation_operator()<319>
IDENTIFIER(d)<320>
assignment_operator(=)<321>
NUMBER(3)<322>
end_operator()<323>
IDENTIFIER(myTest)<324>
assignment_short_operator(!)<325>
end_operator()<327>
IDENTIFIER(myTest)<328>
assignment_operator(=)<329>
negative_operator()<330>
IDENTIFIER(myTest)<331>
end_operator()<332>
IDENTIFIER(a)<333>
assignment_short_operator(+)<334>
end_operator()<336>
IDENTIFIER(a)<337>
assignment_operator(+)<338>
NUMBER(1)<340>
end_operator()<341>
IDENTIFIER(a)<342>
assignment_operator(=)<343>
IDENTIFIER(a)<344>
maths_operator(+)<345>
NUMBER(1)<346>
end_operator()<347>
IDENTIFIER(b)<348>
assignment_short_operator(-)<349>
end_operator()<351>
IDENTIFIER(b)<352>
assignment_operator(-)<353>
NUMBER(1)<355>
end_operator()<356>
IDENTIFIER(b)<357>
assignment_operator(=)<358>
IDENTIFIER(b)<359>
maths_operator(-)<360>
NUMBER(1)<361>
end_operator()<362>
IDENTIFIER(c)<363>
assignment_operator(%)<364>
IDENTIFIER(d)<366>
end_operator()<367>
IDENTIFIER(c)<368>
maths_operator(%)<369>
IDENTIFIER(d)<370>
end_operator()<371>
IDENTIFIER(c)<372>
assignment_operator(/)<373>
NUMBER(0.5)<375>
end_operator()<376>
IDENTIFIER(c)<377>
maths_operator(/)<378>
IDENTIFIER(d)<379>
end_operator()<380>
IDENTIFIER(c)<381>
assignment_operator(*)<382>
IDENTIFIER(d)<384>
end_operator()<385>
IDENTIFIER(c)<386>
assignment_operator(=)<387>
IDENTIFIER(c)<388>
maths_operator(*)<389>
IDENTIFIER(d)<390>
end_operator()<391>
zone_operator(})<392>
function_declarator()<393>
return_type_operator()<394>
type_specifier(string)<396>
IDENTIFIER(myStringTest)<397>
parentheses_operator(()<398>
type_specifier(string)<399>
IDENTIFIER(a)<400>
parentheses_operator())<401>
zone_operator({)<402>
type_specifier(string)<403>
IDENTIFIER(b)<404>
assignment_operator(=)<405>
STRING(Hi!)<406>
end_operator()<407>
delete_statement()<408>
IDENTIFIER(b)<409>
end_operator()<410>
type_specifier(int)<411>
IDENTIFIER(b)<412>
assignment_operator(=)<413>
NUMBER(1)<414>
end_operator()<415>
zone_operator(})<416>
zone_operator(})<417>
state_specifier(public)<418>
class_declarator()<419>
IDENTIFIER(AnotherClass)<420>
zone_operator({)<421>
state_specifier(public)<422>
type_specifier(int)<423>
IDENTIFIER(a)<424>
assignment_operator(=)<425>
NUMBER(0)<426>
end_operator()<427>
state_specifier(private)<428>
type_specifier(int)<429>
IDENTIFIER(b)<430>
assignment_operator(=)<431>
NUMBER(0)<432>
end_operator()<433>
function_declarator()<434>
return_type_operator()<435>
IDENTIFIER(AnotherClass)<437>
parentheses_operator(()<438>
type_specifier(int)<439>
IDENTIFIER(a)<440>
separation_operator()<441>
type_specifier(int)<442>
IDENTIFIER(b)<443>
parentheses_operator())<444>
zone_operator({)<445>
IDENTIFIER(this)<446>
dot_operator()<447>
IDENTIFIER(a)<448>
assignment_operator(=)<449>
IDENTIFIER(a)<450>
end_operator()<451>
IDENTIFIER(this)<452>
dot_operator()<453>
IDENTIFIER(b)<454>
assignment_operator(=)<455>
IDENTIFIER(b)<456>
end_operator()<457>
zone_operator(})<458>
zone_operator(})<459>
class_declarator()<460>
IDENTIFIER(Smth)<461>
zone_operator({)<462>
zone_operator(})<463>
zone_operator(})<464>
