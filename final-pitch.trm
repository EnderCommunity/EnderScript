STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
group_declarator()<5>
IDENTIFIER(AnotherLibrary)<6>
zone_operator(open)<7>
class_declarator()<8>
IDENTIFIER(MyClass)<9>
zone_operator(open)<10>
function_declarator()<11>
info_operator()<12>
type_specifier(int)<13>
IDENTIFIER(NumOne)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
end_operator()<20>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
group_declarator()<24>
state_operator()<25>
state_specifier(public)<27>
IDENTIFIER(LibFilNam)<28>
zone_operator(open)<29>
class_declarator()<30>
state_operator()<31>
state_specifier(public)<33>
IDENTIFIER(section)<34>
zone_operator(open)<35>
function_declarator()<36>
info_operator()<37>
type_specifier(string)<38>
IDENTIFIER(myFunction)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
variable_declarator()<46>
info_operator()<47>
type_specifier(string)<48>
IDENTIFIER(output)<49>
end_operator()<50>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
end_operator()<54>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
setsize_statement()<58>
type_specifier(int)<59>
NUMBER(2)<60>
end_operator()<61>
setsize_statement()<62>
type_specifier(double)<63>
NUMBER(10)<64>
end_operator()<65>
group_declarator()<66>
state_operator()<67>
state_specifier(public)<69>
IDENTIFIER(FinalPitch)<70>
zone_operator(open)<71>
class_declarator()<72>
state_operator()<73>
state_specifier(public)<75>
IDENTIFIER(Program)<76>
zone_operator(open)<77>
variable_declarator()<78>
state_operator()<79>
state_specifier(public)<81>
info_operator()<82>
type_specifier(int)<83>
IDENTIFIER(globA)<84>
assignment_operator(=)<85>
NUMBER(0)<86>
end_operator()<87>
variable_declarator()<88>
state_operator()<89>
state_specifier(public)<91>
info_operator()<92>
type_specifier(double)<93>
IDENTIFIER(globB)<94>
assignment_operator(=)<95>
DECNUMBER(0.0)<96>
end_operator()<97>
variable_declarator()<98>
state_operator()<99>
state_specifier(public)<101>
info_operator()<102>
type_specifier(float)<103>
IDENTIFIER(globC)<104>
assignment_operator(=)<105>
DECNUMBER(0.0)<106>
end_operator()<107>
variable_declarator()<108>
state_operator()<109>
state_specifier(public)<111>
info_operator()<112>
type_specifier(char)<113>
IDENTIFIER(globD)<114>
assignment_operator(=)<115>
CHAR(D)<116>
end_operator()<117>
variable_declarator()<118>
state_operator()<119>
state_specifier(public)<121>
info_operator()<122>
type_specifier(string)<123>
IDENTIFIER(globE)<124>
assignment_operator(=)<125>
STRING(Global E)<126>
end_operator()<127>
variable_declarator()<128>
state_operator()<129>
state_specifier(public)<131>
info_operator()<132>
type_specifier(bool)<133>
IDENTIFIER(globF)<134>
assignment_operator(=)<135>
BOOLEAN(true)<136>
end_operator()<137>
variable_declarator()<138>
state_operator()<139>
state_specifier(public)<141>
info_operator()<142>
type_specifier(file)<143>
IDENTIFIER(globG)<144>
assignment_operator(=)<145>
IDENTIFIER(new)<146>
IDENTIFIER(files)<147>
dot_operator()<148>
IDENTIFIER(stream)<149>
parentheses_operator(open)<150>
STRING(path/to/my/file.txt)<151>
parentheses_operator(close)<152>
end_operator()<153>
variable_declarator()<154>
state_operator()<155>
state_specifier(public)<157>
info_operator()<158>
type_specifier(hex)<159>
IDENTIFIER(globH)<160>
assignment_operator(=)<161>
HEX(FF)<162>
end_operator()<163>
variable_declarator()<164>
state_operator()<165>
state_specifier(public)<167>
info_operator()<168>
type_specifier(string[1])<169>
IDENTIFIER(globI)<172>
assignment_operator(=)<173>
IDENTIFIER(new)<174>
IDENTIFIER(types)<175>
dot_operator()<176>
IDENTIFIER(Array)<177>
info_operator()<178>
type_specifier(string[1])<179>
parentheses_operator(open)<182>
NUMBER(6)<183>
parentheses_operator(close)<184>
end_operator()<185>
variable_declarator()<186>
state_operator()<187>
state_specifier(private)<189>
info_operator()<190>
type_specifier(hex[2])<191>
IDENTIFIER(globJ)<195>
assignment_operator(=)<196>
IDENTIFIER(new)<197>
IDENTIFIER(types)<198>
dot_operator()<199>
IDENTIFIER(Array)<200>
info_operator()<201>
type_specifier(hex[1])<202>
parentheses_operator(open)<205>
NUMBER(8)<206>
separation_operator()<207>
NUMBER(2)<208>
parentheses_operator(close)<209>
end_operator()<210>
function_declarator()<211>
state_operator()<212>
state_specifier(public)<214>
info_operator()<215>
type_specifier(int)<216>
IDENTIFIER(Main)<217>
parentheses_operator(open)<218>
IDENTIFIER(envi)<219>
info_operator()<220>
type_specifier(string[1])<221>
separation_operator()<224>
IDENTIFIER(length)<225>
info_operator()<226>
type_specifier(int)<227>
parentheses_operator(close)<228>
zone_operator(open)<229>
IDENTIFIER(Func)<230>
parentheses_operator(open)<231>
parentheses_operator(close)<232>
end_operator()<233>
variable_declarator()<234>
info_operator()<235>
type_specifier(^int)<236>
IDENTIFIER(a)<238>
assignment_operator(=)<239>
NUMBER(0)<240>
end_operator()<241>
variable_declarator()<242>
info_operator()<243>
type_specifier(int)<244>
IDENTIFIER(b)<245>
assignment_operator(=)<246>
NUMBER(1)<247>
end_operator()<248>
variable_declarator()<249>
info_operator()<250>
type_specifier(^int)<251>
IDENTIFIER(c)<253>
assignment_operator(=)<254>
IDENTIFIER(Test)<255>
parentheses_operator(open)<256>
IDENTIFIER(a)<257>
separation_operator()<258>
NUMBER(1)<259>
parentheses_operator(close)<260>
end_operator()<261>
IDENTIFIER(a)<262>
assignment_operator(=)<263>
NUMBER(1)<264>
separation_operator()<265>
IDENTIFIER(c)<266>
assignment_operator(=)<267>
NUMBER(5)<268>
end_operator()<269>
IDENTIFIER(a)<270>
assignment_operator(=)<271>
IDENTIFIER(c)<272>
assignment_operator(=)<273>
NUMBER(6)<274>
end_operator()<275>
IDENTIFIER(PlusOne)<276>
parentheses_operator(open)<277>
IDENTIFIER(b)<278>
info_operator()<279>
ref_statement()<280>
parentheses_operator(close)<281>
end_operator()<282>
variable_declarator()<283>
info_operator()<284>
type_specifier(bool)<285>
IDENTIFIER(myTest)<286>
assignment_operator(=)<287>
BOOLEAN(false)<288>
end_operator()<289>
if_statement()<290>
parentheses_operator(open)<291>
IDENTIFIER(myTest)<292>
comparison_operator(=)<293>
BOOLEAN(true)<295>
parentheses_operator(close)<296>
zone_operator(open)<297>
zone_operator(close)<298>
else_statement()<299>
zone_operator(open)<300>
zone_operator(close)<301>
if_statement()<302>
parentheses_operator(open)<303>
IDENTIFIER(myTest)<304>
comparison_operator(!)<305>
BOOLEAN(true)<307>
parentheses_operator(close)<308>
zone_operator(open)<309>
zone_operator(close)<310>
if_statement()<311>
parentheses_operator(open)<312>
NUMBER(1)<313>
comparison_operator(>)<314>
NUMBER(5)<316>
comparison_operator(|)<317>
NUMBER(1)<319>
comparison_operator(~>)<320>
NUMBER(5)<321>
comparison_operator(|)<322>
parentheses_operator(open)<324>
NUMBER(1)<325>
comparison_operator(~>)<326>
NUMBER(1)<327>
comparison_operator(&)<328>
NUMBER(1)<330>
comparison_operator(~<)<331>
NUMBER(1)<332>
parentheses_operator(close)<333>
parentheses_operator(close)<334>
zone_operator(open)<335>
zone_operator(close)<336>
if_statement()<337>
parentheses_operator(open)<338>
NUMBER(1)<339>
comparison_operator(<)<340>
NUMBER(5)<342>
comparison_operator(|)<343>
NUMBER(1)<345>
comparison_operator(~<)<346>
NUMBER(5)<347>
parentheses_operator(close)<348>
zone_operator(open)<349>
zone_operator(close)<350>
IDENTIFIER(io)<351>
dot_operator()<352>
IDENTIFIER(console)<353>
dot_operator()<354>
IDENTIFIER(print)<355>
parentheses_operator(open)<356>
STRING(Hello there!)<357>
parentheses_operator(close)<358>
end_operator()<359>
return_statement()<360>
NUMBER(0)<361>
end_operator()<362>
zone_operator(close)<363>
function_declarator()<364>
state_operator()<365>
state_specifier(private)<367>
info_operator()<368>
type_specifier(void)<369>
IDENTIFIER(Func)<370>
parentheses_operator(open)<371>
parentheses_operator(close)<372>
zone_operator(open)<373>
zone_operator(close)<374>
function_declarator()<375>
state_operator()<376>
state_specifier(public)<378>
info_operator()<379>
type_specifier(^int)<380>
IDENTIFIER(Test)<382>
parentheses_operator(open)<383>
IDENTIFIER(a)<384>
info_operator()<385>
type_specifier(^int)<386>
separation_operator()<388>
IDENTIFIER(b)<389>
info_operator()<390>
type_specifier(int)<391>
parentheses_operator(close)<392>
zone_operator(open)<393>
IDENTIFIER(a)<394>
assignment_operator(=)<395>
parentheses_operator(open)<396>
type_specifier(^int)<397>
parentheses_operator(close)<399>
IDENTIFIER(b)<400>
end_operator()<401>
return_statement()<402>
IDENTIFIER(a)<403>
end_operator()<404>
zone_operator(close)<405>
function_declarator()<406>
state_operator()<407>
state_specifier(public)<409>
info_operator()<410>
type_specifier(void)<411>
IDENTIFIER(PlusOne)<412>
parentheses_operator(open)<413>
IDENTIFIER(a)<414>
info_operator()<415>
type_specifier(int)<416>
info_operator()<417>
ref_statement()<418>
parentheses_operator(close)<419>
zone_operator(open)<420>
IDENTIFIER(a)<421>
assignment_short_operator(+)<422>
end_operator()<424>
zone_operator(close)<425>
function_declarator()<426>
state_operator()<427>
state_specifier(public)<429>
info_operator()<430>
type_specifier(void)<431>
IDENTIFIER(myTests)<432>
parentheses_operator(open)<433>
parentheses_operator(close)<434>
zone_operator(open)<435>
variable_declarator()<436>
info_operator()<437>
type_specifier(bool)<438>
IDENTIFIER(myTest)<439>
assignment_operator(=)<440>
BOOLEAN(false)<441>
end_operator()<442>
variable_declarator()<443>
info_operator()<444>
type_specifier(int)<445>
IDENTIFIER(a)<446>
assignment_operator(=)<447>
NUMBER(0)<448>
separation_operator()<449>
IDENTIFIER(b)<450>
assignment_operator(=)<451>
NUMBER(0)<452>
end_operator()<453>
variable_declarator()<454>
info_operator()<455>
type_specifier(double)<456>
IDENTIFIER(c)<457>
assignment_operator(=)<458>
NUMBER(4)<459>
separation_operator()<460>
IDENTIFIER(d)<461>
assignment_operator(=)<462>
NUMBER(3)<463>
end_operator()<464>
IDENTIFIER(myTest)<465>
assignment_short_operator(!)<466>
end_operator()<468>
IDENTIFIER(myTest)<469>
assignment_operator(=)<470>
negative_operator()<471>
IDENTIFIER(myTest)<472>
end_operator()<473>
IDENTIFIER(a)<474>
assignment_short_operator(+)<475>
end_operator()<477>
IDENTIFIER(a)<478>
assignment_operator(+)<479>
NUMBER(1)<481>
end_operator()<482>
IDENTIFIER(a)<483>
assignment_operator(=)<484>
IDENTIFIER(a)<485>
maths_operator(+)<486>
NUMBER(1)<487>
end_operator()<488>
IDENTIFIER(b)<489>
assignment_short_operator(-)<490>
end_operator()<492>
IDENTIFIER(b)<493>
assignment_operator(-)<494>
NUMBER(1)<496>
end_operator()<497>
IDENTIFIER(b)<498>
assignment_operator(=)<499>
IDENTIFIER(b)<500>
maths_operator(-)<501>
NUMBER(1)<502>
end_operator()<503>
IDENTIFIER(c)<504>
assignment_operator(%)<505>
IDENTIFIER(d)<507>
end_operator()<508>
IDENTIFIER(c)<509>
maths_operator(%)<510>
IDENTIFIER(d)<511>
end_operator()<512>
IDENTIFIER(c)<513>
assignment_operator(/)<514>
DECNUMBER(0.5)<516>
end_operator()<517>
IDENTIFIER(c)<518>
maths_operator(/)<519>
IDENTIFIER(d)<520>
end_operator()<521>
IDENTIFIER(c)<522>
assignment_operator(*)<523>
IDENTIFIER(d)<525>
end_operator()<526>
IDENTIFIER(c)<527>
assignment_operator(=)<528>
IDENTIFIER(c)<529>
maths_operator(*)<530>
IDENTIFIER(d)<531>
end_operator()<532>
zone_operator(close)<533>
function_declarator()<534>
info_operator()<535>
type_specifier(string)<536>
IDENTIFIER(myStringTest)<537>
parentheses_operator(open)<538>
IDENTIFIER(a)<539>
info_operator()<540>
type_specifier(string)<541>
parentheses_operator(close)<542>
zone_operator(open)<543>
variable_declarator()<544>
info_operator()<545>
type_specifier(string)<546>
IDENTIFIER(b)<547>
assignment_operator(=)<548>
STRING(Hi!)<549>
end_operator()<550>
delete_statement()<551>
IDENTIFIER(b)<552>
end_operator()<553>
variable_declarator()<554>
info_operator()<555>
type_specifier(int)<556>
IDENTIFIER(b)<557>
assignment_operator(=)<558>
NUMBER(100)<559>
separation_operator()<560>
IDENTIFIER(c)<561>
assignment_operator(=)<562>
NUMBER(0)<563>
end_operator()<564>
delete_statement()<565>
IDENTIFIER(d)<566>
separation_operator()<567>
IDENTIFIER(c)<568>
end_operator()<569>
zone_operator(close)<570>
function_declarator()<571>
info_operator()<572>
type_specifier(hex[2])<573>
IDENTIFIER(ReturnHexArray)<577>
parentheses_operator(open)<578>
parentheses_operator(close)<579>
zone_operator(open)<580>
return_statement()<581>
IDENTIFIER(this)<582>
dot_operator()<583>
IDENTIFIER(globJ)<584>
end_operator()<585>
zone_operator(close)<586>
zone_operator(close)<587>
class_declarator()<588>
state_operator()<589>
state_specifier(public)<591>
IDENTIFIER(AnotherClass)<592>
zone_operator(open)<593>
variable_declarator()<594>
state_operator()<595>
state_specifier(public)<597>
info_operator()<598>
type_specifier(int)<599>
IDENTIFIER(a)<600>
assignment_operator(=)<601>
NUMBER(0)<602>
end_operator()<603>
variable_declarator()<604>
state_operator()<605>
state_specifier(private)<607>
info_operator()<608>
type_specifier(int)<609>
IDENTIFIER(b)<610>
assignment_operator(=)<611>
NUMBER(0)<612>
end_operator()<613>
function_declarator()<614>
state_operator()<615>
state_specifier(public)<617>
info_operator()<618>
IDENTIFIER(AnotherClass)<619>
IDENTIFIER(Construct)<620>
parentheses_operator(open)<621>
IDENTIFIER(a)<622>
info_operator()<623>
type_specifier(int)<624>
separation_operator()<625>
IDENTIFIER(b)<626>
info_operator()<627>
type_specifier(int)<628>
parentheses_operator(close)<629>
zone_operator(open)<630>
IDENTIFIER(this)<631>
dot_operator()<632>
IDENTIFIER(a)<633>
assignment_operator(=)<634>
IDENTIFIER(a)<635>
end_operator()<636>
IDENTIFIER(this)<637>
dot_operator()<638>
IDENTIFIER(b)<639>
assignment_operator(=)<640>
IDENTIFIER(b)<641>
end_operator()<642>
zone_operator(close)<643>
zone_operator(close)<644>
class_declarator()<645>
IDENTIFIER(Smth)<646>
zone_operator(open)<647>
function_declarator()<648>
info_operator()<649>
type_specifier(void)<650>
IDENTIFIER(myTest)<651>
parentheses_operator(open)<652>
IDENTIFIER(a)<653>
info_operator()<654>
type_specifier(int)<655>
parentheses_operator(close)<656>
zone_operator(open)<657>
zone_operator(close)<658>
zone_operator(close)<659>
zone_operator(close)<660>
