STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
group_declarator()<5>
IDENTIFIER(AnotherLibrary)<6>
zone_operator(open)<7>
class_declarator()<8>
IDENTIFIER(MyClass)<9>
zone_operator(open)<10>
function_declarator()<11>
info_operator()<12>
type_specifier(int)<13>
IDENTIFIER(NumOne)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
end_operator()<20>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
group_declarator()<24>
state_operator()<25>
state_specifier(public)<27>
IDENTIFIER(LibFilNam)<28>
zone_operator(open)<29>
class_declarator()<30>
state_operator()<31>
state_specifier(public)<33>
IDENTIFIER(section)<34>
zone_operator(open)<35>
function_declarator()<36>
info_operator()<37>
type_specifier(string)<38>
IDENTIFIER(myFunction)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
variable_declarator()<46>
info_operator()<47>
type_specifier(string)<48>
IDENTIFIER(output)<49>
end_operator()<50>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
end_operator()<54>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
setsize_statement()<58>
type_specifier(int)<59>
NUMBER(2)<60>
end_operator()<61>
setsize_statement()<62>
type_specifier(double)<63>
NUMBER(10)<64>
end_operator()<65>
group_declarator()<66>
state_operator()<67>
state_specifier(public)<69>
IDENTIFIER(FinalPitch)<70>
zone_operator(open)<71>
class_declarator()<72>
state_operator()<73>
state_specifier(public)<75>
IDENTIFIER(Program)<76>
zone_operator(open)<77>
variable_declarator()<78>
state_operator()<79>
state_specifier(public)<81>
info_operator()<82>
type_specifier(int)<83>
IDENTIFIER(globA)<84>
assignment_operator(=)<85>
NUMBER(0)<86>
end_operator()<87>
variable_declarator()<88>
state_operator()<89>
state_specifier(public)<91>
info_operator()<92>
type_specifier(double)<93>
IDENTIFIER(globB)<94>
assignment_operator(=)<95>
DECNUMBER(0.0)<96>
end_operator()<97>
variable_declarator()<98>
state_operator()<99>
state_specifier(public)<101>
info_operator()<102>
type_specifier(float)<103>
IDENTIFIER(globC)<104>
assignment_operator(=)<105>
DECNUMBER(0.0)<106>
end_operator()<107>
variable_declarator()<108>
state_operator()<109>
state_specifier(public)<111>
info_operator()<112>
type_specifier(char)<113>
IDENTIFIER(globD)<114>
assignment_operator(=)<115>
CHAR(D)<116>
end_operator()<117>
variable_declarator()<118>
state_operator()<119>
state_specifier(public)<121>
info_operator()<122>
type_specifier(string)<123>
IDENTIFIER(globE)<124>
assignment_operator(=)<125>
STRING(Global E)<126>
end_operator()<127>
variable_declarator()<128>
state_operator()<129>
state_specifier(public)<131>
info_operator()<132>
type_specifier(bool)<133>
IDENTIFIER(globF)<134>
assignment_operator(=)<135>
BOOLEAN(true)<136>
end_operator()<137>
variable_declarator()<138>
state_operator()<139>
state_specifier(public)<141>
info_operator()<142>
type_specifier(file)<143>
IDENTIFIER(globG)<144>
assignment_operator(=)<145>
IDENTIFIER(new)<146>
type_specifier(file)<147>
dot_operator()<148>
IDENTIFIER(stream)<149>
parentheses_operator(open)<150>
STRING(path/to/my/file.txt)<151>
parentheses_operator(close)<152>
end_operator()<153>
variable_declarator()<154>
state_operator()<155>
state_specifier(public)<157>
info_operator()<158>
type_specifier(hex)<159>
IDENTIFIER(globH)<160>
assignment_operator(=)<161>
HEX(FF)<162>
end_operator()<163>
variable_declarator()<164>
state_operator()<165>
state_specifier(public)<167>
info_operator()<168>
type_specifier(string[1])<169>
IDENTIFIER(globI)<172>
assignment_operator(=)<173>
IDENTIFIER(new)<174>
IDENTIFIER(array)<175>
dot_operator()<176>
type_specifier(string)<177>
parentheses_operator(open)<178>
NUMBER(6)<179>
parentheses_operator(close)<180>
end_operator()<181>
variable_declarator()<182>
state_operator()<183>
state_specifier(private)<185>
info_operator()<186>
type_specifier(hex[2])<187>
IDENTIFIER(globJ)<191>
assignment_operator(=)<192>
IDENTIFIER(new)<193>
IDENTIFIER(array)<194>
dot_operator()<195>
type_specifier(hex)<196>
parentheses_operator(open)<197>
NUMBER(8)<198>
separation_operator()<199>
NUMBER(2)<200>
parentheses_operator(close)<201>
end_operator()<202>
function_declarator()<203>
state_operator()<204>
state_specifier(public)<206>
info_operator()<207>
type_specifier(int)<208>
IDENTIFIER(Main)<209>
parentheses_operator(open)<210>
IDENTIFIER(envi)<211>
info_operator()<212>
type_specifier(string[1])<213>
separation_operator()<216>
IDENTIFIER(length)<217>
info_operator()<218>
type_specifier(int)<219>
parentheses_operator(close)<220>
zone_operator(open)<221>
IDENTIFIER(Func)<222>
parentheses_operator(open)<223>
parentheses_operator(close)<224>
end_operator()<225>
variable_declarator()<226>
info_operator()<227>
type_specifier(^int)<228>
IDENTIFIER(a)<230>
assignment_operator(=)<231>
NUMBER(0)<232>
end_operator()<233>
variable_declarator()<234>
info_operator()<235>
type_specifier(int)<236>
IDENTIFIER(b)<237>
assignment_operator(=)<238>
NUMBER(1)<239>
end_operator()<240>
variable_declarator()<241>
info_operator()<242>
type_specifier(^int)<243>
IDENTIFIER(c)<245>
assignment_operator(=)<246>
IDENTIFIER(Test)<247>
parentheses_operator(open)<248>
IDENTIFIER(a)<249>
separation_operator()<250>
NUMBER(1)<251>
parentheses_operator(close)<252>
end_operator()<253>
IDENTIFIER(a)<254>
assignment_operator(=)<255>
NUMBER(1)<256>
separation_operator()<257>
IDENTIFIER(c)<258>
assignment_operator(=)<259>
NUMBER(5)<260>
end_operator()<261>
IDENTIFIER(a)<262>
assignment_operator(=)<263>
IDENTIFIER(c)<264>
assignment_operator(=)<265>
NUMBER(6)<266>
end_operator()<267>
IDENTIFIER(PlusOne)<268>
parentheses_operator(open)<269>
IDENTIFIER(b)<270>
info_operator()<271>
ref_statement()<272>
parentheses_operator(close)<273>
end_operator()<274>
variable_declarator()<275>
info_operator()<276>
type_specifier(bool)<277>
IDENTIFIER(myTest)<278>
assignment_operator(=)<279>
BOOLEAN(false)<280>
end_operator()<281>
if_statement()<282>
parentheses_operator(open)<283>
IDENTIFIER(myTest)<284>
comparison_operator(=)<285>
BOOLEAN(true)<287>
parentheses_operator(close)<288>
zone_operator(open)<289>
zone_operator(close)<290>
else_statement()<291>
if_statement()<292>
parentheses_operator(open)<293>
BOOLEAN(false)<294>
parentheses_operator(close)<295>
zone_operator(open)<296>
zone_operator(close)<297>
else_statement()<298>
zone_operator(open)<299>
zone_operator(close)<300>
if_statement()<301>
parentheses_operator(open)<302>
IDENTIFIER(myTest)<303>
comparison_operator(!)<304>
BOOLEAN(true)<306>
parentheses_operator(close)<307>
zone_operator(open)<308>
zone_operator(close)<309>
if_statement()<310>
parentheses_operator(open)<311>
NUMBER(1)<312>
comparison_operator(>)<313>
NUMBER(5)<315>
comparison_operator(|)<316>
NUMBER(1)<318>
comparison_operator(~>)<319>
NUMBER(5)<320>
comparison_operator(|)<321>
parentheses_operator(open)<323>
NUMBER(1)<324>
comparison_operator(~>)<325>
NUMBER(1)<326>
comparison_operator(&)<327>
NUMBER(1)<329>
comparison_operator(~<)<330>
NUMBER(1)<331>
parentheses_operator(close)<332>
parentheses_operator(close)<333>
zone_operator(open)<334>
zone_operator(close)<335>
if_statement()<336>
parentheses_operator(open)<337>
NUMBER(1)<338>
comparison_operator(<)<339>
NUMBER(5)<341>
comparison_operator(|)<342>
NUMBER(1)<344>
comparison_operator(~<)<345>
NUMBER(5)<346>
parentheses_operator(close)<347>
zone_operator(open)<348>
zone_operator(close)<349>
IDENTIFIER(io)<350>
dot_operator()<351>
IDENTIFIER(console)<352>
dot_operator()<353>
IDENTIFIER(print)<354>
parentheses_operator(open)<355>
STRING(Hello there!)<356>
parentheses_operator(close)<357>
end_operator()<358>
return_statement()<359>
NUMBER(0)<360>
end_operator()<361>
zone_operator(close)<362>
function_declarator()<363>
state_operator()<364>
state_specifier(private)<366>
info_operator()<367>
type_specifier(void)<368>
IDENTIFIER(Func)<369>
parentheses_operator(open)<370>
parentheses_operator(close)<371>
zone_operator(open)<372>
zone_operator(close)<373>
function_declarator()<374>
state_operator()<375>
state_specifier(public)<377>
info_operator()<378>
type_specifier(^int)<379>
IDENTIFIER(Test)<381>
parentheses_operator(open)<382>
IDENTIFIER(a)<383>
info_operator()<384>
type_specifier(^int)<385>
separation_operator()<387>
IDENTIFIER(b)<388>
info_operator()<389>
type_specifier(int)<390>
parentheses_operator(close)<391>
zone_operator(open)<392>
IDENTIFIER(a)<393>
assignment_operator(=)<394>
parentheses_operator(open)<395>
type_specifier(^int)<396>
parentheses_operator(close)<398>
IDENTIFIER(b)<399>
end_operator()<400>
return_statement()<401>
IDENTIFIER(a)<402>
end_operator()<403>
zone_operator(close)<404>
function_declarator()<405>
state_operator()<406>
state_specifier(public)<408>
info_operator()<409>
type_specifier(void)<410>
IDENTIFIER(PlusOne)<411>
parentheses_operator(open)<412>
IDENTIFIER(a)<413>
info_operator()<414>
type_specifier(int)<415>
info_operator()<416>
ref_statement()<417>
parentheses_operator(close)<418>
zone_operator(open)<419>
IDENTIFIER(a)<420>
assignment_short_operator(+)<421>
end_operator()<423>
zone_operator(close)<424>
function_declarator()<425>
state_operator()<426>
state_specifier(public)<428>
info_operator()<429>
type_specifier(void)<430>
IDENTIFIER(myTests)<431>
parentheses_operator(open)<432>
parentheses_operator(close)<433>
zone_operator(open)<434>
variable_declarator()<435>
info_operator()<436>
type_specifier(bool)<437>
IDENTIFIER(myTest)<438>
assignment_operator(=)<439>
BOOLEAN(false)<440>
end_operator()<441>
variable_declarator()<442>
info_operator()<443>
type_specifier(int)<444>
IDENTIFIER(a)<445>
assignment_operator(=)<446>
NUMBER(0)<447>
separation_operator()<448>
IDENTIFIER(b)<449>
assignment_operator(=)<450>
NUMBER(0)<451>
end_operator()<452>
variable_declarator()<453>
info_operator()<454>
type_specifier(double)<455>
IDENTIFIER(c)<456>
assignment_operator(=)<457>
NUMBER(4)<458>
separation_operator()<459>
IDENTIFIER(d)<460>
assignment_operator(=)<461>
NUMBER(3)<462>
end_operator()<463>
IDENTIFIER(myTest)<464>
assignment_short_operator(!)<465>
end_operator()<467>
IDENTIFIER(myTest)<468>
assignment_operator(=)<469>
negative_operator()<470>
IDENTIFIER(myTest)<471>
end_operator()<472>
IDENTIFIER(a)<473>
assignment_short_operator(+)<474>
end_operator()<476>
IDENTIFIER(a)<477>
assignment_operator(+)<478>
NUMBER(1)<480>
end_operator()<481>
IDENTIFIER(a)<482>
assignment_operator(=)<483>
IDENTIFIER(a)<484>
maths_operator(+)<485>
NUMBER(1)<486>
end_operator()<487>
IDENTIFIER(b)<488>
assignment_short_operator(-)<489>
end_operator()<491>
IDENTIFIER(b)<492>
assignment_operator(-)<493>
NUMBER(1)<495>
end_operator()<496>
IDENTIFIER(b)<497>
assignment_operator(=)<498>
IDENTIFIER(b)<499>
maths_operator(-)<500>
NUMBER(1)<501>
end_operator()<502>
IDENTIFIER(c)<503>
assignment_operator(%)<504>
IDENTIFIER(d)<506>
end_operator()<507>
IDENTIFIER(c)<508>
maths_operator(%)<509>
IDENTIFIER(d)<510>
end_operator()<511>
IDENTIFIER(c)<512>
assignment_operator(/)<513>
DECNUMBER(0.5)<515>
end_operator()<516>
IDENTIFIER(c)<517>
maths_operator(/)<518>
IDENTIFIER(d)<519>
end_operator()<520>
IDENTIFIER(c)<521>
assignment_operator(*)<522>
IDENTIFIER(d)<524>
end_operator()<525>
IDENTIFIER(c)<526>
assignment_operator(=)<527>
IDENTIFIER(c)<528>
maths_operator(*)<529>
IDENTIFIER(d)<530>
end_operator()<531>
zone_operator(close)<532>
function_declarator()<533>
info_operator()<534>
type_specifier(string)<535>
IDENTIFIER(myStringTest)<536>
parentheses_operator(open)<537>
IDENTIFIER(a)<538>
info_operator()<539>
type_specifier(string)<540>
parentheses_operator(close)<541>
zone_operator(open)<542>
variable_declarator()<543>
info_operator()<544>
type_specifier(string)<545>
IDENTIFIER(b)<546>
assignment_operator(=)<547>
STRING(Hi!)<548>
end_operator()<549>
delete_statement()<550>
IDENTIFIER(b)<551>
end_operator()<552>
variable_declarator()<553>
info_operator()<554>
type_specifier(int)<555>
IDENTIFIER(b)<556>
assignment_operator(=)<557>
NUMBER(100)<558>
separation_operator()<559>
IDENTIFIER(c)<560>
assignment_operator(=)<561>
NUMBER(0)<562>
end_operator()<563>
delete_statement()<564>
IDENTIFIER(d)<565>
separation_operator()<566>
IDENTIFIER(c)<567>
end_operator()<568>
zone_operator(close)<569>
function_declarator()<570>
info_operator()<571>
type_specifier(hex[2])<572>
IDENTIFIER(ReturnHexArray)<576>
parentheses_operator(open)<577>
parentheses_operator(close)<578>
zone_operator(open)<579>
return_statement()<580>
this_statement()<581>
dot_operator()<582>
IDENTIFIER(globJ)<583>
end_operator()<584>
zone_operator(close)<585>
zone_operator(close)<586>
class_declarator()<587>
state_operator()<588>
state_specifier(public)<590>
IDENTIFIER(AnotherClass)<591>
zone_operator(open)<592>
variable_declarator()<593>
state_operator()<594>
state_specifier(public)<596>
info_operator()<597>
type_specifier(int)<598>
IDENTIFIER(a)<599>
assignment_operator(=)<600>
NUMBER(0)<601>
end_operator()<602>
variable_declarator()<603>
state_operator()<604>
state_specifier(private)<606>
info_operator()<607>
type_specifier(int)<608>
IDENTIFIER(b)<609>
assignment_operator(=)<610>
NUMBER(0)<611>
end_operator()<612>
function_declarator()<613>
state_operator()<614>
state_specifier(public)<616>
info_operator()<617>
IDENTIFIER(AnotherClass)<618>
IDENTIFIER(Construct)<619>
parentheses_operator(open)<620>
IDENTIFIER(a)<621>
info_operator()<622>
type_specifier(int)<623>
separation_operator()<624>
IDENTIFIER(b)<625>
info_operator()<626>
type_specifier(int)<627>
parentheses_operator(close)<628>
zone_operator(open)<629>
this_statement()<630>
dot_operator()<631>
IDENTIFIER(a)<632>
assignment_operator(=)<633>
IDENTIFIER(a)<634>
end_operator()<635>
this_statement()<636>
dot_operator()<637>
IDENTIFIER(b)<638>
assignment_operator(=)<639>
IDENTIFIER(b)<640>
end_operator()<641>
zone_operator(close)<642>
zone_operator(close)<643>
class_declarator()<644>
IDENTIFIER(Smth)<645>
zone_operator(open)<646>
function_declarator()<647>
info_operator()<648>
type_specifier(void)<649>
IDENTIFIER(myTest)<650>
parentheses_operator(open)<651>
IDENTIFIER(a)<652>
info_operator()<653>
type_specifier(int)<654>
parentheses_operator(close)<655>
zone_operator(open)<656>
zone_operator(close)<657>
zone_operator(close)<658>
zone_operator(close)<659>
