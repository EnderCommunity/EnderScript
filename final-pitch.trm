STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
group_declarator()<5>
IDENTIFIER(AnotherLibrary)<6>
zone_operator(open)<7>
class_declarator()<8>
IDENTIFIER(MyClass)<9>
zone_operator(open)<10>
function_declarator()<11>
info_operator()<12>
type_specifier(int)<13>
IDENTIFIER(NumOne)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
end_operator()<20>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
group_declarator()<24>
state_operator()<25>
state_specifier(public)<27>
IDENTIFIER(LibFilNam)<28>
zone_operator(open)<29>
class_declarator()<30>
state_operator()<31>
state_specifier(public)<33>
IDENTIFIER(section)<34>
zone_operator(open)<35>
function_declarator()<36>
info_operator()<37>
type_specifier(string)<38>
IDENTIFIER(myFunction)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
variable_declarator()<46>
info_operator()<47>
type_specifier(string)<48>
IDENTIFIER(output)<49>
end_operator()<50>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
end_operator()<54>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
setsize_statement()<58>
type_specifier(int)<59>
NUMBER(2)<60>
end_operator()<61>
setsize_statement()<62>
type_specifier(double)<63>
NUMBER(10)<64>
end_operator()<65>
group_declarator()<66>
state_operator()<67>
state_specifier(public)<69>
IDENTIFIER(FinalPitch)<70>
zone_operator(open)<71>
class_declarator()<72>
state_operator()<73>
state_specifier(public)<75>
IDENTIFIER(Program)<76>
zone_operator(open)<77>
variable_declarator()<78>
state_operator()<79>
state_specifier(public)<81>
info_operator()<82>
type_specifier(int)<83>
IDENTIFIER(globA)<84>
assignment_operator(=)<85>
NUMBER(0)<86>
end_operator()<87>
variable_declarator()<88>
state_operator()<89>
state_specifier(public)<91>
info_operator()<92>
type_specifier(double)<93>
IDENTIFIER(globB)<94>
assignment_operator(=)<95>
DECNUMBER(0.0)<96>
end_operator()<97>
variable_declarator()<98>
state_operator()<99>
state_specifier(public)<101>
info_operator()<102>
type_specifier(float)<103>
IDENTIFIER(globC)<104>
assignment_operator(=)<105>
DECNUMBER(0.0)<106>
end_operator()<107>
variable_declarator()<108>
state_operator()<109>
state_specifier(public)<111>
info_operator()<112>
type_specifier(char)<113>
IDENTIFIER(globD)<114>
assignment_operator(=)<115>
CHAR(D)<116>
end_operator()<117>
variable_declarator()<118>
state_operator()<119>
state_specifier(public)<121>
info_operator()<122>
type_specifier(string)<123>
IDENTIFIER(globE)<124>
assignment_operator(=)<125>
STRING(Global E)<126>
end_operator()<127>
variable_declarator()<128>
state_operator()<129>
state_specifier(public)<131>
info_operator()<132>
type_specifier(bool)<133>
IDENTIFIER(globF)<134>
assignment_operator(=)<135>
BOOLEAN(true)<136>
end_operator()<137>
variable_declarator()<138>
state_operator()<139>
state_specifier(public)<141>
info_operator()<142>
type_specifier(file)<143>
IDENTIFIER(globG)<144>
assignment_operator(=)<145>
IDENTIFIER(new)<146>
IDENTIFIER(FileStream)<147>
parentheses_operator(open)<148>
STRING(path/to/my/file.txt)<149>
parentheses_operator(close)<150>
end_operator()<151>
variable_declarator()<152>
state_operator()<153>
state_specifier(public)<155>
info_operator()<156>
type_specifier(hex)<157>
IDENTIFIER(globH)<158>
assignment_operator(=)<159>
HEX(FF)<160>
end_operator()<161>
variable_declarator()<162>
state_operator()<163>
state_specifier(public)<165>
info_operator()<166>
type_specifier(string[1])<167>
IDENTIFIER(globI)<170>
assignment_operator(=)<171>
IDENTIFIER(new)<172>
IDENTIFIER(Array)<173>
info_operator()<174>
type_specifier(string[1])<175>
parentheses_operator(open)<178>
NUMBER(6)<179>
parentheses_operator(close)<180>
end_operator()<181>
variable_declarator()<182>
state_operator()<183>
state_specifier(private)<185>
info_operator()<186>
type_specifier(hex[2])<187>
IDENTIFIER(globJ)<191>
assignment_operator(=)<192>
IDENTIFIER(new)<193>
IDENTIFIER(Array)<194>
info_operator()<195>
type_specifier(hex[2])<196>
parentheses_operator(open)<200>
NUMBER(8)<201>
separation_operator()<202>
NUMBER(2)<203>
parentheses_operator(close)<204>
end_operator()<205>
function_declarator()<206>
state_operator()<207>
state_specifier(public)<209>
info_operator()<210>
type_specifier(int)<211>
IDENTIFIER(Main)<212>
parentheses_operator(open)<213>
IDENTIFIER(envi)<214>
info_operator()<215>
type_specifier(string[1])<216>
separation_operator()<219>
IDENTIFIER(length)<220>
info_operator()<221>
type_specifier(int)<222>
parentheses_operator(close)<223>
zone_operator(open)<224>
IDENTIFIER(Func)<225>
parentheses_operator(open)<226>
parentheses_operator(close)<227>
end_operator()<228>
variable_declarator()<229>
info_operator()<230>
type_specifier(^int)<231>
IDENTIFIER(a)<233>
assignment_operator(=)<234>
NUMBER(0)<235>
end_operator()<236>
variable_declarator()<237>
info_operator()<238>
type_specifier(int)<239>
IDENTIFIER(b)<240>
assignment_operator(=)<241>
NUMBER(1)<242>
end_operator()<243>
variable_declarator()<244>
info_operator()<245>
type_specifier(^int)<246>
IDENTIFIER(c)<248>
assignment_operator(=)<249>
IDENTIFIER(Test)<250>
parentheses_operator(open)<251>
IDENTIFIER(a)<252>
separation_operator()<253>
NUMBER(1)<254>
parentheses_operator(close)<255>
end_operator()<256>
IDENTIFIER(a)<257>
assignment_operator(=)<258>
NUMBER(1)<259>
separation_operator()<260>
IDENTIFIER(c)<261>
assignment_operator(=)<262>
NUMBER(5)<263>
end_operator()<264>
IDENTIFIER(a)<265>
assignment_operator(=)<266>
IDENTIFIER(c)<267>
assignment_operator(=)<268>
NUMBER(6)<269>
end_operator()<270>
IDENTIFIER(PlusOne)<271>
parentheses_operator(open)<272>
IDENTIFIER(b)<273>
info_operator()<274>
ref_statement()<275>
parentheses_operator(close)<276>
end_operator()<277>
variable_declarator()<278>
info_operator()<279>
type_specifier(bool)<280>
IDENTIFIER(myTest)<281>
assignment_operator(=)<282>
BOOLEAN(false)<283>
end_operator()<284>
if_statement()<285>
parentheses_operator(open)<286>
IDENTIFIER(myTest)<287>
comparison_operator(=)<288>
BOOLEAN(true)<290>
parentheses_operator(close)<291>
zone_operator(open)<292>
zone_operator(close)<293>
else_statement()<294>
zone_operator(open)<295>
zone_operator(close)<296>
if_statement()<297>
parentheses_operator(open)<298>
IDENTIFIER(myTest)<299>
comparison_operator(!)<300>
BOOLEAN(true)<302>
parentheses_operator(close)<303>
zone_operator(open)<304>
zone_operator(close)<305>
if_statement()<306>
parentheses_operator(open)<307>
NUMBER(1)<308>
comparison_operator(>)<309>
NUMBER(5)<311>
comparison_operator(|)<312>
NUMBER(1)<314>
comparison_operator(~>)<315>
NUMBER(5)<316>
comparison_operator(|)<317>
parentheses_operator(open)<319>
NUMBER(1)<320>
comparison_operator(~>)<321>
NUMBER(1)<322>
comparison_operator(&)<323>
NUMBER(1)<325>
comparison_operator(~<)<326>
NUMBER(1)<327>
parentheses_operator(close)<328>
parentheses_operator(close)<329>
zone_operator(open)<330>
zone_operator(close)<331>
if_statement()<332>
parentheses_operator(open)<333>
NUMBER(1)<334>
comparison_operator(<)<335>
NUMBER(5)<337>
comparison_operator(|)<338>
NUMBER(1)<340>
comparison_operator(~<)<341>
NUMBER(5)<342>
parentheses_operator(close)<343>
zone_operator(open)<344>
zone_operator(close)<345>
return_statement()<346>
IDENTIFIER(ZERO)<347>
end_operator()<348>
zone_operator(close)<349>
function_declarator()<350>
state_operator()<351>
state_specifier(private)<353>
info_operator()<354>
type_specifier(void)<355>
IDENTIFIER(Func)<356>
parentheses_operator(open)<357>
parentheses_operator(close)<358>
zone_operator(open)<359>
zone_operator(close)<360>
function_declarator()<361>
state_operator()<362>
state_specifier(public)<364>
info_operator()<365>
type_specifier(^int)<366>
IDENTIFIER(Test)<368>
parentheses_operator(open)<369>
IDENTIFIER(a)<370>
info_operator()<371>
type_specifier(^int)<372>
separation_operator()<374>
IDENTIFIER(b)<375>
info_operator()<376>
type_specifier(int)<377>
parentheses_operator(close)<378>
zone_operator(open)<379>
IDENTIFIER(a)<380>
assignment_operator(=)<381>
parentheses_operator(open)<382>
type_specifier(^int)<383>
parentheses_operator(close)<385>
IDENTIFIER(b)<386>
end_operator()<387>
return_statement()<388>
IDENTIFIER(a)<389>
end_operator()<390>
zone_operator(close)<391>
function_declarator()<392>
state_operator()<393>
state_specifier(public)<395>
info_operator()<396>
type_specifier(void)<397>
IDENTIFIER(PlusOne)<398>
parentheses_operator(open)<399>
IDENTIFIER(a)<400>
info_operator()<401>
type_specifier(int)<402>
info_operator()<403>
ref_statement()<404>
parentheses_operator(close)<405>
zone_operator(open)<406>
IDENTIFIER(a)<407>
assignment_short_operator(+)<408>
end_operator()<410>
zone_operator(close)<411>
function_declarator()<412>
state_operator()<413>
state_specifier(public)<415>
info_operator()<416>
type_specifier(void)<417>
IDENTIFIER(myTests)<418>
parentheses_operator(open)<419>
parentheses_operator(close)<420>
zone_operator(open)<421>
variable_declarator()<422>
info_operator()<423>
type_specifier(bool)<424>
IDENTIFIER(myTest)<425>
assignment_operator(=)<426>
BOOLEAN(false)<427>
end_operator()<428>
variable_declarator()<429>
info_operator()<430>
type_specifier(int)<431>
IDENTIFIER(a)<432>
assignment_operator(=)<433>
NUMBER(0)<434>
separation_operator()<435>
IDENTIFIER(b)<436>
assignment_operator(=)<437>
NUMBER(0)<438>
end_operator()<439>
variable_declarator()<440>
info_operator()<441>
type_specifier(double)<442>
IDENTIFIER(c)<443>
assignment_operator(=)<444>
NUMBER(4)<445>
separation_operator()<446>
IDENTIFIER(d)<447>
assignment_operator(=)<448>
NUMBER(3)<449>
end_operator()<450>
IDENTIFIER(myTest)<451>
assignment_short_operator(!)<452>
end_operator()<454>
IDENTIFIER(myTest)<455>
assignment_operator(=)<456>
negative_operator()<457>
IDENTIFIER(myTest)<458>
end_operator()<459>
IDENTIFIER(a)<460>
assignment_short_operator(+)<461>
end_operator()<463>
IDENTIFIER(a)<464>
assignment_operator(+)<465>
NUMBER(1)<467>
end_operator()<468>
IDENTIFIER(a)<469>
assignment_operator(=)<470>
IDENTIFIER(a)<471>
maths_operator(+)<472>
NUMBER(1)<473>
end_operator()<474>
IDENTIFIER(b)<475>
assignment_short_operator(-)<476>
end_operator()<478>
IDENTIFIER(b)<479>
assignment_operator(-)<480>
NUMBER(1)<482>
end_operator()<483>
IDENTIFIER(b)<484>
assignment_operator(=)<485>
IDENTIFIER(b)<486>
maths_operator(-)<487>
NUMBER(1)<488>
end_operator()<489>
IDENTIFIER(c)<490>
assignment_operator(%)<491>
IDENTIFIER(d)<493>
end_operator()<494>
IDENTIFIER(c)<495>
maths_operator(%)<496>
IDENTIFIER(d)<497>
end_operator()<498>
IDENTIFIER(c)<499>
assignment_operator(/)<500>
DECNUMBER(0.5)<502>
end_operator()<503>
IDENTIFIER(c)<504>
maths_operator(/)<505>
IDENTIFIER(d)<506>
end_operator()<507>
IDENTIFIER(c)<508>
assignment_operator(*)<509>
IDENTIFIER(d)<511>
end_operator()<512>
IDENTIFIER(c)<513>
assignment_operator(=)<514>
IDENTIFIER(c)<515>
maths_operator(*)<516>
IDENTIFIER(d)<517>
end_operator()<518>
zone_operator(close)<519>
function_declarator()<520>
info_operator()<521>
type_specifier(string)<522>
IDENTIFIER(myStringTest)<523>
parentheses_operator(open)<524>
IDENTIFIER(a)<525>
info_operator()<526>
type_specifier(string)<527>
parentheses_operator(close)<528>
zone_operator(open)<529>
variable_declarator()<530>
info_operator()<531>
type_specifier(string)<532>
IDENTIFIER(b)<533>
assignment_operator(=)<534>
STRING(Hi!)<535>
end_operator()<536>
delete_statement()<537>
IDENTIFIER(b)<538>
end_operator()<539>
variable_declarator()<540>
info_operator()<541>
type_specifier(int)<542>
IDENTIFIER(b)<543>
assignment_operator(=)<544>
NUMBER(1)<545>
end_operator()<546>
zone_operator(close)<547>
function_declarator()<548>
info_operator()<549>
type_specifier(hex[2])<550>
IDENTIFIER(ReturnHexArray)<554>
parentheses_operator(open)<555>
parentheses_operator(close)<556>
zone_operator(open)<557>
return_statement()<558>
IDENTIFIER(this)<559>
dot_operator()<560>
IDENTIFIER(globJ)<561>
end_operator()<562>
zone_operator(close)<563>
zone_operator(close)<564>
class_declarator()<565>
state_operator()<566>
state_specifier(public)<568>
IDENTIFIER(AnotherClass)<569>
zone_operator(open)<570>
variable_declarator()<571>
state_operator()<572>
state_specifier(public)<574>
info_operator()<575>
type_specifier(int)<576>
IDENTIFIER(a)<577>
assignment_operator(=)<578>
NUMBER(0)<579>
end_operator()<580>
variable_declarator()<581>
state_operator()<582>
state_specifier(private)<584>
info_operator()<585>
type_specifier(int)<586>
IDENTIFIER(b)<587>
assignment_operator(=)<588>
NUMBER(0)<589>
end_operator()<590>
function_declarator()<591>
state_operator()<592>
state_specifier(public)<594>
info_operator()<595>
IDENTIFIER(AnotherClass)<596>
IDENTIFIER(Construct)<597>
parentheses_operator(open)<598>
IDENTIFIER(a)<599>
info_operator()<600>
type_specifier(int)<601>
separation_operator()<602>
IDENTIFIER(b)<603>
info_operator()<604>
type_specifier(int)<605>
parentheses_operator(close)<606>
zone_operator(open)<607>
IDENTIFIER(this)<608>
dot_operator()<609>
IDENTIFIER(a)<610>
assignment_operator(=)<611>
IDENTIFIER(a)<612>
end_operator()<613>
IDENTIFIER(this)<614>
dot_operator()<615>
IDENTIFIER(b)<616>
assignment_operator(=)<617>
IDENTIFIER(b)<618>
end_operator()<619>
zone_operator(close)<620>
zone_operator(close)<621>
class_declarator()<622>
IDENTIFIER(Smth)<623>
zone_operator(open)<624>
function_declarator()<625>
info_operator()<626>
type_specifier(void)<627>
IDENTIFIER(myTest)<628>
parentheses_operator(open)<629>
IDENTIFIER(a)<630>
info_operator()<631>
type_specifier(int)<632>
parentheses_operator(close)<633>
zone_operator(open)<634>
zone_operator(close)<635>
zone_operator(close)<636>
zone_operator(close)<637>
