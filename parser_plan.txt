# Types

# SYMBOL, STRING, CHAR,
# NUMBER, OPERATOR, BOOLEAN,
# ZONE_LINE, HEX

ZONE_LINE
    : <ZONE_LINE>
    ;

STRING
    : <STRING>
    ;

CHAR
    : <CHAR>
    ;

BOOLEAN
    : <BOOLEAN>
    ;

NUMBER
    : <NUMBER>
    ;

HEX
    : <HEX>
    ;

IDENTIFIER
    : <SYMBOL>
    ;


# Specifiers

type_specifier
    : void <SYMBOL>
    | int <SYMBOL>
    | double <SYMBOL>
    | char <SYMBOL>
    | string <SYMBOL>
    | bool <SYMBOL>
    | file <SYMBOL>
    | hex <SYMBOL>
    ;

state_specifier
    : public <SYMBOL>
    | private <SYMBOL>
    ;


# Declarators

function_declarator
    : function <SYMBOL>
    ;

group_declarator
    : group <SYMBOL>
    ;

class_declarator
    : class <SYMBOL>
    ;


# Statements
return_statement
    : return <SYMBOL>
    ;

ref_statement
    : ref <SYMBOL>
    ;

delete_statement
    : delete <SYMBOL>
    ;


# Operators

assignment_operator
    : = <OPERATOR>
    | + <OPERATOR>
    & = <OPERATOR>
    | - <OPERATOR>
    & = <OPERATOR>
    | / <OPERATOR>
    & = <OPERATOR>
    | % <OPERATOR>
    & = <OPERATOR>
    | * <OPERATOR>
    & = <OPERATOR>
    ;

comparison_operator
    : = <OPERATOR>
    & = <OPERATOR>
    | ! <OPERATOR>
    & = <OPERATOR>
    | > <OPERATOR>
    & = <OPERATOR>
    | < <OPERATOR>
    & = <OPERATOR>
    | > <OPERATOR>
    | < <OPERATOR>
    | | <OPERATOR>
    & | <OPERATOR>
    | & <OPERATOR>
    & & <OPERATOR>
    ;

end_operator
    : ; <OPERATOR>
    ;

maths_operator
    : + <OPERATOR>
    | - <OPERATOR>
    | / <OPERATOR>
    | % <OPERATOR>
    | * <OPERATOR>
    ;

zone_operator
    : { <OPERATOR>
    | } <OPERATOR>
    ;

array_operator
    : [ <OPERATOR>
    | ] <OPERATOR>
    ;

return_type_operator
    : : <OPERATOR>
    & : <OPERATOR>
    ;

assignment_short_operator
    : + <OPERATOR>
    & + <OPERATOR>
    | - <OPERATOR>
    & - <OPERATOR>
    | ! <OPERATOR>
    & ! <OPERATOR>
    ;

negative_operator
    : ! <OPERATOR>
    ;

parentheses_operator
    : ( <OPERATOR>
    | ) <OPERATOR>
    ;

separation_operator
    : , <OPERATOR>
    ;

dot_operator
    : . <OPERATOR>
    ;

elevational_operator
    : ^ <OPERATOR>
    ;




# non-terminals



# Some stuff
BLOCK
    : { <OPERATOR>
    > } <OPERATOR>
    ;


# Function declaration

function
    : <state_specifier>
    & <function_declarator>
    & <return_type_operator>
    & <type_specifier>
    & <IDENTIFIER>
    & <BLOCK>
    | <function_declarator>
    & <return_type_operator>
    & <type_specifier>
    & <IDENTIFIER>
    & <BLOCK>
    ;


# Group declaration

group
    : <state_specifier>
    & <group_declarator>
    & <IDENTIFIER>
    & <BLOCK>
    | <group_declarator>
    & <IDENTIFIER>
    & <BLOCK>
    ;


# Class declaration

class
    : <state_specifier>
    & <class_declarator>
    & <IDENTIFIER>
    & <BLOCK>
    | <class_declarator>
    & <IDENTIFIER>
    & <BLOCK>
    ;
