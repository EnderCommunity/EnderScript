# Types

# SYMBOL, STRING, CHAR,
# NUMBER, OPERATOR, BOOLEAN,
# ZONE_LINE

ZONE_LINE
    : <ZONE_LINE>
    ;

STRING
    : <STRING>
    ;

CHAR
    : <CHAR>
    ;

BOOLEAN
    : <BOOLEAN>
    ;

NUMBER
    : <NUMBER>
    ;

IDENTIFIER
    : <SYMBOL>
    ;


# Specifiers

type_specifier
    : int <SYMBOL>
    | double <SYMBOL>
    | char <SYMBOL>
    | string <SYMBOL>
    | bool <SYMBOL>
    | file <SYMBOL>
    ;

state_specifier
    : public <SYMBOL>
    | private <SYMBOL>
    ;


# Declarators

function_declarator
    : function <SYMBOL>
    ;

group_declarator
    : group <SYMBOL>
    ;

class_declarator
    : class <SYMBOL>
    ;


# Operators

assignment_operator
    : = <OPERATOR>
    ;

plus_assignment_operator
    : + <OPERATOR>
    & = <OPERATOR>
    ;

subtract_assignment_operator
    : - <OPERATOR>
    & = <OPERATOR>
    ;

divide_assignment_operator
    : / <OPERATOR>
    & = <OPERATOR>
    ;

mod_assignment_operator
    : % <OPERATOR>
    & = <OPERATOR>
    ;

multiply_assignment_operator
    : * <OPERATOR>
    & = <OPERATOR>
    ;

comparison_operator
    : = <OPERATOR>
    & = <OPERATOR>
    ;

negative_comparison_operator
    : ! <OPERATOR>
    & = <OPERATOR>
    ;

greater_equal_comparison_operator
    : > <OPERATOR>
    & = <OPERATOR>
    ;

greater_comparison_operator
    : > <OPERATOR>
    ;

smaller_equal_comparison_operator
    : < <OPERATOR>
    & = <OPERATOR>
    ;

smaller_comparison_operator
    : < <OPERATOR>
    ;

end_operator
    : ; <OPERATOR>
    ;

addition_operator
    : + <OPERATOR>
    ;

subtraction_operator
    : - <OPERATOR>
    ;

division_operator
    : / <OPERATOR>
    ;

modulo_operator
    : % <OPERATOR>
    ;

multiplication_operator
    : * <OPERATOR>
    ;

zone_start_operator
    : { <OPERATOR>
    ;

zone_end_operator
    : } <OPERATOR>
    ;

return_type_operator
    : : <OPERATOR>
    & : <OPERATOR>
    ;

or_operator
    : | <OPERATOR>
    & | <OPERATOR>
    ;

and_operator
    : & <OPERATOR>
    & & <OPERATOR>
    ;

negative_reassign_operator
    : ! <OPERATOR>
    & ! <OPERATOR>
    ;

addition_reassign_operator
    : + <OPERATOR>
    & + <OPERATOR>
    ;

subtraction_reassign_operator
    : - <OPERATOR>
    & - <OPERATOR>
    ;

negative_operator
    : ! <OPERATOR>
    ;

opening_parentheses_operator
    : ( <OPERATOR>
    ;

closing_parentheses_operator
    : ) <OPERATOR>
    ;

separation_operator
    : , <OPERATOR>
    ;

elevational_operator
    : ^ <OPERATOR>
    ;




# non-terminals



# Some stuff
BLOCK
    : { <OPERATOR>
    > } <OPERATOR>
    ;


# Function declaration

function
    : <function_declarator>
    & <IDENTIFIER>
    & <BLOCK>
    ;


# Group declaration

group
    : <group_declarator>
    & <IDENTIFIER>
    & <BLOCK>
    ;


# Class declaration

class
    : <class_declarator>
    & <IDENTIFIER>
    & <BLOCK>
    ;

