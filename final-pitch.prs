STRING(Test 1!)<1>
STRING(Test 2!)<3>
DEFINE_GROUP(AnotherLibrary,1)<5>
zone_operator(open)<7>
DEFINE_CLASS(MyClass,1)<8>
zone_operator(open)<10>
DEFINE_FUNCTION(NumOne,int,1)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
DEFINE_GROUP(LibFilNam,1)<24>
zone_operator(open)<29>
DEFINE_CLASS(section,1)<30>
zone_operator(open)<35>
DEFINE_FUNCTION(myFunction,string,1)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
DEFINE_VAR(output,string,1)<49>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
IDENTIFIER(define)<58>
IDENTIFIER(ZERO)<59>
NUMBER(0)<60>
SETSIZE(int,2)<62>
SETSIZE(double,10)<66>
DEFINE_GROUP(FinalPitch,1)<70>
zone_operator(open)<75>
DEFINE_CLASS(Program,1)<76>
zone_operator(open)<81>
DEFINE_VAR(globA,int,1)<88>
ASSIGN(globA)<90>:
NUMBER(0)<90>
;
DEFINE_VAR(globB,double,1)<98>
ASSIGN(globB)<100>:
DECNUMBER(0.0)<100>
;
DEFINE_VAR(globC,float,1)<108>
ASSIGN(globC)<110>:
DECNUMBER(0.0)<110>
;
DEFINE_VAR(globD,char,1)<118>
ASSIGN(globD)<120>:
CHAR(D)<120>
;
DEFINE_VAR(globE,string,1)<128>
ASSIGN(globE)<130>:
STRING(Global E)<130>
;
DEFINE_VAR(globF,bool,1)<138>
ASSIGN(globF)<140>:
BOOLEAN(true)<140>
;
DEFINE_VAR(globG,file,1)<148>
ASSIGN(globG)<150>:
IDENTIFIER(new)<150>
IDENTIFIER(FileStream)<151>
parentheses_operator(open)<152>
STRING(path/to/my/file.txt)<153>
parentheses_operator(close)<154>
;
DEFINE_VAR(globH,hex,1)<162>
ASSIGN(globH)<164>:
HEX(FF)<164>
;
DEFINE_VAR(globI,string[1],1)<174>
ASSIGN(globI)<176>:
IDENTIFIER(new)<176>
IDENTIFIER(Array)<177>
info_operator()<178>
type_specifier(string[1])<179>
parentheses_operator(open)<182>
NUMBER(6)<183>
parentheses_operator(close)<184>
;
DEFINE_VAR(globJ,hex[2],0)<195>
ASSIGN(globJ)<197>:
IDENTIFIER(new)<197>
IDENTIFIER(Array)<198>
info_operator()<199>
type_specifier(hex[2])<200>
parentheses_operator(open)<204>
NUMBER(8)<205>
separation_operator()<206>
NUMBER(2)<207>
parentheses_operator(close)<208>
;
DEFINE_FUNCTION(Main,int,1)<216>
parentheses_operator(open)<217>
IDENTIFIER(envi)<218>
info_operator()<219>
type_specifier(string[1])<220>
separation_operator()<223>
IDENTIFIER(length)<224>
info_operator()<225>
type_specifier(int)<226>
parentheses_operator(close)<227>
zone_operator(open)<228>
IDENTIFIER(Func)<229>
parentheses_operator(open)<230>
parentheses_operator(close)<231>
DEFINE_VAR(a,^int,1)<237>
ASSIGN(a)<239>:
NUMBER(0)<239>
;
DEFINE_VAR(b,int,1)<244>
ASSIGN(b)<246>:
NUMBER(1)<246>
;
DEFINE_VAR(c,^int,1)<252>
ASSIGN(c)<254>:
IDENTIFIER(Test)<254>
parentheses_operator(open)<255>
IDENTIFIER(a)<256>
separation_operator()<257>
NUMBER(1)<258>
parentheses_operator(close)<259>
;
IDENTIFIER(a)<261>
assignment_operator(=)<262>
NUMBER(1)<263>
separation_operator()<264>
IDENTIFIER(c)<265>
assignment_operator(=)<266>
NUMBER(5)<267>
IDENTIFIER(PlusOne)<269>
parentheses_operator(open)<270>
IDENTIFIER(b)<271>
info_operator()<272>
ref_statement()<273>
parentheses_operator(close)<274>
DEFINE_VAR(myTest,bool,1)<279>
ASSIGN(myTest)<281>:
BOOLEAN(false)<281>
;
if_statement()<283>
parentheses_operator(open)<284>
IDENTIFIER(myTest)<285>
comparison_operator(=)<286>
BOOLEAN(true)<288>
parentheses_operator(close)<289>
zone_operator(open)<290>
zone_operator(close)<291>
else_statement()<292>
zone_operator(open)<293>
zone_operator(close)<294>
if_statement()<295>
parentheses_operator(open)<296>
IDENTIFIER(myTest)<297>
comparison_operator(!)<298>
BOOLEAN(true)<300>
parentheses_operator(close)<301>
zone_operator(open)<302>
zone_operator(close)<303>
if_statement()<304>
parentheses_operator(open)<305>
NUMBER(1)<306>
comparison_operator(>)<307>
NUMBER(5)<309>
comparison_operator(|)<310>
NUMBER(1)<312>
comparison_operator(~>)<313>
NUMBER(5)<314>
comparison_operator(|)<315>
parentheses_operator(open)<317>
NUMBER(1)<318>
comparison_operator(~>)<319>
NUMBER(1)<320>
comparison_operator(&)<321>
NUMBER(1)<323>
comparison_operator(~<)<0>
NUMBER(1)<325>
parentheses_operator(close)<326>
parentheses_operator(close)<327>
zone_operator(open)<328>
zone_operator(close)<329>
if_statement()<330>
parentheses_operator(open)<331>
NUMBER(1)<332>
comparison_operator(<)<0>
NUMBER(5)<335>
comparison_operator(|)<336>
NUMBER(1)<338>
comparison_operator(~<)<0>
NUMBER(5)<340>
parentheses_operator(close)<341>
zone_operator(open)<342>
zone_operator(close)<343>
return_statement()<344>
NUMBER(0)<345>
zone_operator(close)<347>
DEFINE_FUNCTION(Func,void,0)<354>
parentheses_operator(open)<355>
parentheses_operator(close)<356>
zone_operator(open)<357>
zone_operator(close)<358>
DEFINE_FUNCTION(Test,^int,1)<366>
parentheses_operator(open)<367>
IDENTIFIER(a)<368>
info_operator()<369>
type_specifier(^int)<370>
separation_operator()<372>
IDENTIFIER(b)<373>
info_operator()<374>
type_specifier(int)<375>
parentheses_operator(close)<376>
zone_operator(open)<377>
IDENTIFIER(a)<378>
assignment_operator(=)<379>
parentheses_operator(open)<380>
type_specifier(^int)<381>
parentheses_operator(close)<383>
IDENTIFIER(b)<384>
return_statement()<386>
IDENTIFIER(a)<387>
zone_operator(close)<389>
DEFINE_FUNCTION(PlusOne,void,1)<396>
parentheses_operator(open)<397>
IDENTIFIER(a)<398>
info_operator()<399>
type_specifier(int)<400>
info_operator()<401>
ref_statement()<402>
parentheses_operator(close)<403>
zone_operator(open)<404>
IDENTIFIER(a)<405>
assignment_short_operator(+)<406>
zone_operator(close)<409>
DEFINE_FUNCTION(myTests,void,1)<416>
parentheses_operator(open)<417>
parentheses_operator(close)<418>
zone_operator(open)<419>
DEFINE_VAR(myTest,bool,1)<423>
ASSIGN(myTest)<425>:
BOOLEAN(false)<425>
;
DEFINE_VAR(a,int,1)<430>
ASSIGN(a)<432>:
NUMBER(0)<432>
;
DEFINE_VAR(b,int,1)<434>
ASSIGN(b)<436>:
NUMBER(0)<436>
;
DEFINE_VAR(c,double,1)<441>
ASSIGN(c)<443>:
NUMBER(4)<443>
;
DEFINE_VAR(d,double,1)<445>
ASSIGN(d)<447>:
NUMBER(3)<447>
;
IDENTIFIER(myTest)<449>
assignment_short_operator(!)<450>
IDENTIFIER(myTest)<453>
assignment_operator(=)<454>
negative_operator()<455>
IDENTIFIER(myTest)<456>
IDENTIFIER(a)<458>
assignment_short_operator(+)<459>
IDENTIFIER(a)<462>
assignment_operator(+)<463>
NUMBER(1)<465>
IDENTIFIER(a)<467>
assignment_operator(=)<468>
IDENTIFIER(a)<469>
maths_operator(+)<470>
NUMBER(1)<471>
IDENTIFIER(b)<473>
assignment_short_operator(-)<474>
IDENTIFIER(b)<477>
assignment_operator(-)<478>
NUMBER(1)<480>
IDENTIFIER(b)<482>
assignment_operator(=)<483>
IDENTIFIER(b)<484>
maths_operator(-)<485>
NUMBER(1)<486>
IDENTIFIER(c)<488>
assignment_operator(%)<489>
IDENTIFIER(d)<491>
IDENTIFIER(c)<493>
maths_operator(%)<494>
IDENTIFIER(d)<495>
IDENTIFIER(c)<497>
assignment_operator(/)<498>
DECNUMBER(0.5)<500>
IDENTIFIER(c)<502>
maths_operator(/)<503>
IDENTIFIER(d)<504>
IDENTIFIER(c)<506>
assignment_operator(*)<507>
IDENTIFIER(d)<509>
IDENTIFIER(c)<511>
assignment_operator(=)<512>
IDENTIFIER(c)<513>
maths_operator(*)<514>
IDENTIFIER(d)<515>
zone_operator(close)<517>
DEFINE_FUNCTION(myStringTest,string,1)<521>
parentheses_operator(open)<522>
IDENTIFIER(a)<523>
info_operator()<524>
type_specifier(string)<525>
parentheses_operator(close)<526>
zone_operator(open)<527>
DEFINE_VAR(b,string,1)<531>
ASSIGN(b)<533>:
STRING(Hi!)<533>
;
delete_statement()<535>
IDENTIFIER(b)<536>
DEFINE_VAR(b,int,1)<541>
ASSIGN(b)<543>:
NUMBER(1)<543>
;
zone_operator(close)<545>
DEFINE_FUNCTION(ReturnHexArray,hex[2],1)<552>
parentheses_operator(open)<553>
parentheses_operator(close)<554>
zone_operator(open)<555>
return_statement()<556>
IDENTIFIER(this)<557>
dot_operator()<558>
IDENTIFIER(globJ)<559>
zone_operator(close)<561>
zone_operator(close)<562>
DEFINE_CLASS(AnotherClass,1)<563>
zone_operator(open)<568>
DEFINE_VAR(a,int,1)<575>
ASSIGN(a)<577>:
NUMBER(0)<577>
;
DEFINE_VAR(b,int,0)<585>
ASSIGN(b)<587>:
NUMBER(0)<587>
;
DEFINE_FUNCTION(Construct,AnotherClass,1)<595>
parentheses_operator(open)<596>
IDENTIFIER(a)<597>
info_operator()<598>
type_specifier(int)<599>
separation_operator()<600>
IDENTIFIER(b)<601>
info_operator()<602>
type_specifier(int)<603>
parentheses_operator(close)<604>
zone_operator(open)<605>
IDENTIFIER(this)<606>
dot_operator()<607>
IDENTIFIER(a)<608>
assignment_operator(=)<609>
IDENTIFIER(a)<610>
IDENTIFIER(this)<612>
dot_operator()<613>
IDENTIFIER(b)<614>
assignment_operator(=)<615>
IDENTIFIER(b)<616>
zone_operator(close)<618>
zone_operator(close)<619>
DEFINE_CLASS(Smth,1)<620>
zone_operator(open)<622>
DEFINE_FUNCTION(myTest,void,1)<626>
parentheses_operator(open)<627>
IDENTIFIER(a)<628>
info_operator()<629>
type_specifier(int)<630>
parentheses_operator(close)<631>
zone_operator(open)<632>
zone_operator(close)<633>
zone_operator(close)<634>
zone_operator(close)<635>
