STRING(Test 1!)<1>
STRING(Test 2!)<3>
DEFINE_GROUP(AnotherLibrary,1)<5>
zone_operator(open)<7>
DEFINE_CLASS(MyClass,1)<8>
zone_operator(open)<10>
DEFINE_FUNCTION(NumOne,int,1)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
DEFINE_GROUP(LibFilNam,1)<24>
zone_operator(open)<29>
DEFINE_CLASS(section,1)<30>
zone_operator(open)<35>
DEFINE_FUNCTION(myFunction,string,1)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
DEFINE_VARIABLE(output,string,1)<49>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
SETSIZE(int,2)<58>
SETSIZE(double,10)<62>
DEFINE_GROUP(FinalPitch,1)<66>
zone_operator(open)<71>
DEFINE_CLASS(Program,1)<72>
zone_operator(open)<77>
DEFINE_VARIABLE(globA,int,1)<84>
ASSIGN(globA)<86>:
NUMBER(0)<86>
;
DEFINE_VARIABLE(globB,double,1)<94>
ASSIGN(globB)<96>:
DECNUMBER(0.0)<96>
;
DEFINE_VARIABLE(globC,float,1)<104>
ASSIGN(globC)<106>:
DECNUMBER(0.0)<106>
;
DEFINE_VARIABLE(globD,char,1)<114>
ASSIGN(globD)<116>:
CHAR(D)<116>
;
DEFINE_VARIABLE(globE,string,1)<124>
ASSIGN(globE)<126>:
STRING(Global E)<126>
;
DEFINE_VARIABLE(globF,bool,1)<134>
ASSIGN(globF)<136>:
BOOLEAN(true)<136>
;
DEFINE_VARIABLE(globG,file,1)<144>
ASSIGN(globG)<146>:
IDENTIFIER(types)<146>
dot_operator()<147>
IDENTIFIER(create)<148>
dot_operator()<149>
IDENTIFIER(fileStream)<150>
parentheses_operator(open)<151>
STRING(path/to/my/file.txt)<152>
parentheses_operator(close)<153>
;
DEFINE_VARIABLE(globH,hex,1)<161>
ASSIGN(globH)<163>:
HEX(FF)<163>
;
DEFINE_VARIABLE(globI,string[1],1)<173>
ASSIGN(globI)<175>:
IDENTIFIER(types)<175>
dot_operator()<176>
IDENTIFIER(create)<177>
dot_operator()<178>
IDENTIFIER(Array)<179>
info_operator()<180>
type_specifier(string[1])<181>
parentheses_operator(open)<184>
NUMBER(6)<185>
parentheses_operator(close)<186>
;
DEFINE_VARIABLE(globJ,hex[2],0)<197>
ASSIGN(globJ)<199>:
IDENTIFIER(types)<199>
dot_operator()<200>
IDENTIFIER(create)<201>
dot_operator()<202>
IDENTIFIER(Array)<203>
info_operator()<204>
type_specifier(hex[1])<205>
parentheses_operator(open)<208>
NUMBER(8)<209>
separation_operator()<210>
NUMBER(2)<211>
parentheses_operator(close)<212>
;
DEFINE_FUNCTION(Main,int,1)<220>
parentheses_operator(open)<221>
IDENTIFIER(envi)<222>
info_operator()<223>
type_specifier(string[1])<224>
separation_operator()<227>
IDENTIFIER(length)<228>
info_operator()<229>
type_specifier(int)<230>
parentheses_operator(close)<231>
zone_operator(open)<232>
IDENTIFIER(Func)<233>
parentheses_operator(open)<234>
parentheses_operator(close)<235>
DEFINE_VARIABLE(a,^int,1)<241>
ASSIGN(a)<243>:
NUMBER(0)<243>
;
DEFINE_VARIABLE(b,int,1)<248>
ASSIGN(b)<250>:
NUMBER(1)<250>
;
DEFINE_VARIABLE(c,^int,1)<256>
ASSIGN(c)<258>:
IDENTIFIER(Test)<258>
parentheses_operator(open)<259>
IDENTIFIER(a)<260>
separation_operator()<261>
NUMBER(1)<262>
parentheses_operator(close)<263>
;
IDENTIFIER(a)<265>
assignment_operator(=)<266>
NUMBER(1)<267>
separation_operator()<268>
IDENTIFIER(c)<269>
assignment_operator(=)<270>
NUMBER(5)<271>
IDENTIFIER(a)<273>
assignment_operator(=)<274>
IDENTIFIER(c)<275>
assignment_operator(=)<276>
NUMBER(6)<277>
IDENTIFIER(PlusOne)<279>
parentheses_operator(open)<280>
IDENTIFIER(b)<281>
info_operator()<282>
ref_statement()<283>
parentheses_operator(close)<284>
DEFINE_VARIABLE(myTest,bool,1)<289>
ASSIGN(myTest)<291>:
BOOLEAN(false)<291>
;
if_statement()<293>
parentheses_operator(open)<294>
IDENTIFIER(myTest)<295>
comparison_operator(=)<296>
BOOLEAN(true)<298>
parentheses_operator(close)<299>
zone_operator(open)<300>
zone_operator(close)<301>
else_statement()<302>
zone_operator(open)<303>
zone_operator(close)<304>
if_statement()<305>
parentheses_operator(open)<306>
IDENTIFIER(myTest)<307>
comparison_operator(!)<308>
BOOLEAN(true)<310>
parentheses_operator(close)<311>
zone_operator(open)<312>
zone_operator(close)<313>
if_statement()<314>
parentheses_operator(open)<315>
NUMBER(1)<316>
comparison_operator(>)<317>
NUMBER(5)<319>
comparison_operator(|)<320>
NUMBER(1)<322>
comparison_operator(~>)<323>
NUMBER(5)<324>
comparison_operator(|)<325>
parentheses_operator(open)<327>
NUMBER(1)<328>
comparison_operator(~>)<329>
NUMBER(1)<330>
comparison_operator(&)<331>
NUMBER(1)<333>
comparison_operator(~<)<0>
NUMBER(1)<335>
parentheses_operator(close)<336>
parentheses_operator(close)<337>
zone_operator(open)<338>
zone_operator(close)<339>
if_statement()<340>
parentheses_operator(open)<341>
NUMBER(1)<342>
comparison_operator(<)<0>
NUMBER(5)<345>
comparison_operator(|)<346>
NUMBER(1)<348>
comparison_operator(~<)<0>
NUMBER(5)<350>
parentheses_operator(close)<351>
zone_operator(open)<352>
zone_operator(close)<353>
IDENTIFIER(io)<354>
dot_operator()<355>
IDENTIFIER(console)<356>
dot_operator()<357>
IDENTIFIER(print)<358>
parentheses_operator(open)<359>
STRING(Hello there!)<360>
parentheses_operator(close)<361>
return_statement()<363>
NUMBER(0)<364>
zone_operator(close)<366>
DEFINE_FUNCTION(Func,void,0)<373>
parentheses_operator(open)<374>
parentheses_operator(close)<375>
zone_operator(open)<376>
zone_operator(close)<377>
DEFINE_FUNCTION(Test,^int,1)<385>
parentheses_operator(open)<386>
IDENTIFIER(a)<387>
info_operator()<388>
type_specifier(^int)<389>
separation_operator()<391>
IDENTIFIER(b)<392>
info_operator()<393>
type_specifier(int)<394>
parentheses_operator(close)<395>
zone_operator(open)<396>
IDENTIFIER(a)<397>
assignment_operator(=)<398>
parentheses_operator(open)<399>
type_specifier(^int)<400>
parentheses_operator(close)<402>
IDENTIFIER(b)<403>
return_statement()<405>
IDENTIFIER(a)<406>
zone_operator(close)<408>
DEFINE_FUNCTION(PlusOne,void,1)<415>
parentheses_operator(open)<416>
IDENTIFIER(a)<417>
info_operator()<418>
type_specifier(int)<419>
info_operator()<420>
ref_statement()<421>
parentheses_operator(close)<422>
zone_operator(open)<423>
IDENTIFIER(a)<424>
assignment_short_operator(+)<425>
zone_operator(close)<428>
DEFINE_FUNCTION(myTests,void,1)<435>
parentheses_operator(open)<436>
parentheses_operator(close)<437>
zone_operator(open)<438>
DEFINE_VARIABLE(myTest,bool,1)<442>
ASSIGN(myTest)<444>:
BOOLEAN(false)<444>
;
DEFINE_VARIABLE(a,int,1)<449>
ASSIGN(a)<451>:
NUMBER(0)<451>
;
DEFINE_VARIABLE(b,int,1)<453>
ASSIGN(b)<455>:
NUMBER(0)<455>
;
DEFINE_VARIABLE(c,double,1)<460>
ASSIGN(c)<462>:
NUMBER(4)<462>
;
DEFINE_VARIABLE(d,double,1)<464>
ASSIGN(d)<466>:
NUMBER(3)<466>
;
IDENTIFIER(myTest)<468>
assignment_short_operator(!)<469>
IDENTIFIER(myTest)<472>
assignment_operator(=)<473>
negative_operator()<474>
IDENTIFIER(myTest)<475>
IDENTIFIER(a)<477>
assignment_short_operator(+)<478>
IDENTIFIER(a)<481>
assignment_operator(+)<482>
NUMBER(1)<484>
IDENTIFIER(a)<486>
assignment_operator(=)<487>
IDENTIFIER(a)<488>
maths_operator(+)<489>
NUMBER(1)<490>
IDENTIFIER(b)<492>
assignment_short_operator(-)<493>
IDENTIFIER(b)<496>
assignment_operator(-)<497>
NUMBER(1)<499>
IDENTIFIER(b)<501>
assignment_operator(=)<502>
IDENTIFIER(b)<503>
maths_operator(-)<504>
NUMBER(1)<505>
IDENTIFIER(c)<507>
assignment_operator(%)<508>
IDENTIFIER(d)<510>
IDENTIFIER(c)<512>
maths_operator(%)<513>
IDENTIFIER(d)<514>
IDENTIFIER(c)<516>
assignment_operator(/)<517>
DECNUMBER(0.5)<519>
IDENTIFIER(c)<521>
maths_operator(/)<522>
IDENTIFIER(d)<523>
IDENTIFIER(c)<525>
assignment_operator(*)<526>
IDENTIFIER(d)<528>
IDENTIFIER(c)<530>
assignment_operator(=)<531>
IDENTIFIER(c)<532>
maths_operator(*)<533>
IDENTIFIER(d)<534>
zone_operator(close)<536>
DEFINE_FUNCTION(myStringTest,string,1)<540>
parentheses_operator(open)<541>
IDENTIFIER(a)<542>
info_operator()<543>
type_specifier(string)<544>
parentheses_operator(close)<545>
zone_operator(open)<546>
DEFINE_VARIABLE(b,string,1)<550>
ASSIGN(b)<552>:
STRING(Hi!)<552>
;
delete_statement()<554>
IDENTIFIER(b)<555>
DEFINE_VARIABLE(b,int,1)<560>
ASSIGN(b)<562>:
NUMBER(1)<562>
;
zone_operator(close)<564>
DEFINE_FUNCTION(ReturnHexArray,hex[2],1)<571>
parentheses_operator(open)<572>
parentheses_operator(close)<573>
zone_operator(open)<574>
return_statement()<575>
IDENTIFIER(this)<576>
dot_operator()<577>
IDENTIFIER(globJ)<578>
zone_operator(close)<580>
zone_operator(close)<581>
DEFINE_CLASS(AnotherClass,1)<582>
zone_operator(open)<587>
DEFINE_VARIABLE(a,int,1)<594>
ASSIGN(a)<596>:
NUMBER(0)<596>
;
DEFINE_VARIABLE(b,int,0)<604>
ASSIGN(b)<606>:
NUMBER(0)<606>
;
DEFINE_FUNCTION(Construct,AnotherClass,1)<614>
parentheses_operator(open)<615>
IDENTIFIER(a)<616>
info_operator()<617>
type_specifier(int)<618>
separation_operator()<619>
IDENTIFIER(b)<620>
info_operator()<621>
type_specifier(int)<622>
parentheses_operator(close)<623>
zone_operator(open)<624>
IDENTIFIER(this)<625>
dot_operator()<626>
IDENTIFIER(a)<627>
assignment_operator(=)<628>
IDENTIFIER(a)<629>
IDENTIFIER(this)<631>
dot_operator()<632>
IDENTIFIER(b)<633>
assignment_operator(=)<634>
IDENTIFIER(b)<635>
zone_operator(close)<637>
zone_operator(close)<638>
DEFINE_CLASS(Smth,1)<639>
zone_operator(open)<641>
DEFINE_FUNCTION(myTest,void,1)<645>
parentheses_operator(open)<646>
IDENTIFIER(a)<647>
info_operator()<648>
type_specifier(int)<649>
parentheses_operator(close)<650>
zone_operator(open)<651>
zone_operator(close)<652>
zone_operator(close)<653>
zone_operator(close)<654>
