STRING(Test 1!)<1>
STRING(Test 2!)<3>
DEFINE_GROUP(AnotherLibrary,1)<5>
zone_operator(open)<7>
DEFINE_CLASS(MyClass,1)<8>
zone_operator(open)<10>
DEFINE_FUNCTION(NumOne,int,1)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
DEFINE_GROUP(LibFilNam,1)<24>
zone_operator(open)<29>
DEFINE_CLASS(section,1)<30>
zone_operator(open)<35>
DEFINE_FUNCTION(myFunction,string,1)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
DEFINE_VAR(output,string,1)<49>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
SETSIZE(int,2)<58>
SETSIZE(double,10)<62>
DEFINE_GROUP(FinalPitch,1)<66>
zone_operator(open)<71>
DEFINE_CLASS(Program,1)<72>
zone_operator(open)<77>
DEFINE_VAR(globA,int,1)<84>
ASSIGN(globA)<86>:
NUMBER(0)<86>
;
DEFINE_VAR(globB,double,1)<94>
ASSIGN(globB)<96>:
DECNUMBER(0.0)<96>
;
DEFINE_VAR(globC,float,1)<104>
ASSIGN(globC)<106>:
DECNUMBER(0.0)<106>
;
DEFINE_VAR(globD,char,1)<114>
ASSIGN(globD)<116>:
CHAR(D)<116>
;
DEFINE_VAR(globE,string,1)<124>
ASSIGN(globE)<126>:
STRING(Global E)<126>
;
DEFINE_VAR(globF,bool,1)<134>
ASSIGN(globF)<136>:
BOOLEAN(true)<136>
;
DEFINE_VAR(globG,file,1)<144>
ASSIGN(globG)<146>:
IDENTIFIER(new)<146>
IDENTIFIER(FileStream)<147>
parentheses_operator(open)<148>
STRING(path/to/my/file.txt)<149>
parentheses_operator(close)<150>
;
DEFINE_VAR(globH,hex,1)<158>
ASSIGN(globH)<160>:
HEX(FF)<160>
;
DEFINE_VAR(globI,string[1],1)<170>
ASSIGN(globI)<172>:
IDENTIFIER(new)<172>
IDENTIFIER(Array)<173>
info_operator()<174>
type_specifier(string[1])<175>
parentheses_operator(open)<178>
NUMBER(6)<179>
parentheses_operator(close)<180>
;
DEFINE_VAR(globJ,hex[2],0)<191>
ASSIGN(globJ)<193>:
IDENTIFIER(new)<193>
IDENTIFIER(Array)<194>
info_operator()<195>
type_specifier(hex[2])<196>
parentheses_operator(open)<200>
NUMBER(8)<201>
separation_operator()<202>
NUMBER(2)<203>
parentheses_operator(close)<204>
;
DEFINE_FUNCTION(Main,int,1)<212>
parentheses_operator(open)<213>
IDENTIFIER(envi)<214>
info_operator()<215>
type_specifier(string[1])<216>
separation_operator()<219>
IDENTIFIER(length)<220>
info_operator()<221>
type_specifier(int)<222>
parentheses_operator(close)<223>
zone_operator(open)<224>
IDENTIFIER(Func)<225>
parentheses_operator(open)<226>
parentheses_operator(close)<227>
DEFINE_VAR(a,^int,1)<233>
ASSIGN(a)<235>:
NUMBER(0)<235>
;
DEFINE_VAR(b,int,1)<240>
ASSIGN(b)<242>:
NUMBER(1)<242>
;
DEFINE_VAR(c,^int,1)<248>
ASSIGN(c)<250>:
IDENTIFIER(Test)<250>
parentheses_operator(open)<251>
IDENTIFIER(a)<252>
separation_operator()<253>
NUMBER(1)<254>
parentheses_operator(close)<255>
;
IDENTIFIER(a)<257>
assignment_operator(=)<258>
NUMBER(1)<259>
separation_operator()<260>
IDENTIFIER(c)<261>
assignment_operator(=)<262>
NUMBER(5)<263>
IDENTIFIER(PlusOne)<265>
parentheses_operator(open)<266>
IDENTIFIER(b)<267>
info_operator()<268>
ref_statement()<269>
parentheses_operator(close)<270>
DEFINE_VAR(myTest,bool,1)<275>
ASSIGN(myTest)<277>:
BOOLEAN(false)<277>
;
if_statement()<279>
parentheses_operator(open)<280>
IDENTIFIER(myTest)<281>
comparison_operator(=)<282>
BOOLEAN(true)<284>
parentheses_operator(close)<285>
zone_operator(open)<286>
zone_operator(close)<287>
else_statement()<288>
zone_operator(open)<289>
zone_operator(close)<290>
if_statement()<291>
parentheses_operator(open)<292>
IDENTIFIER(myTest)<293>
comparison_operator(!)<294>
BOOLEAN(true)<296>
parentheses_operator(close)<297>
zone_operator(open)<298>
zone_operator(close)<299>
if_statement()<300>
parentheses_operator(open)<301>
NUMBER(1)<302>
comparison_operator(>)<303>
NUMBER(5)<305>
comparison_operator(|)<306>
NUMBER(1)<308>
comparison_operator(~>)<309>
NUMBER(5)<310>
comparison_operator(|)<311>
parentheses_operator(open)<313>
NUMBER(1)<314>
comparison_operator(~>)<315>
NUMBER(1)<316>
comparison_operator(&)<317>
NUMBER(1)<319>
comparison_operator(~<)<0>
NUMBER(1)<321>
parentheses_operator(close)<322>
parentheses_operator(close)<323>
zone_operator(open)<324>
zone_operator(close)<325>
if_statement()<326>
parentheses_operator(open)<327>
NUMBER(1)<328>
comparison_operator(<)<0>
NUMBER(5)<331>
comparison_operator(|)<332>
NUMBER(1)<334>
comparison_operator(~<)<0>
NUMBER(5)<336>
parentheses_operator(close)<337>
zone_operator(open)<338>
zone_operator(close)<339>
return_statement()<340>
NUMBER(0)<341>
zone_operator(close)<343>
DEFINE_FUNCTION(Func,void,0)<350>
parentheses_operator(open)<351>
parentheses_operator(close)<352>
zone_operator(open)<353>
zone_operator(close)<354>
DEFINE_FUNCTION(Test,^int,1)<362>
parentheses_operator(open)<363>
IDENTIFIER(a)<364>
info_operator()<365>
type_specifier(^int)<366>
separation_operator()<368>
IDENTIFIER(b)<369>
info_operator()<370>
type_specifier(int)<371>
parentheses_operator(close)<372>
zone_operator(open)<373>
IDENTIFIER(a)<374>
assignment_operator(=)<375>
parentheses_operator(open)<376>
type_specifier(^int)<377>
parentheses_operator(close)<379>
IDENTIFIER(b)<380>
return_statement()<382>
IDENTIFIER(a)<383>
zone_operator(close)<385>
DEFINE_FUNCTION(PlusOne,void,1)<392>
parentheses_operator(open)<393>
IDENTIFIER(a)<394>
info_operator()<395>
type_specifier(int)<396>
info_operator()<397>
ref_statement()<398>
parentheses_operator(close)<399>
zone_operator(open)<400>
IDENTIFIER(a)<401>
assignment_short_operator(+)<402>
zone_operator(close)<405>
DEFINE_FUNCTION(myTests,void,1)<412>
parentheses_operator(open)<413>
parentheses_operator(close)<414>
zone_operator(open)<415>
DEFINE_VAR(myTest,bool,1)<419>
ASSIGN(myTest)<421>:
BOOLEAN(false)<421>
;
DEFINE_VAR(a,int,1)<426>
ASSIGN(a)<428>:
NUMBER(0)<428>
;
DEFINE_VAR(b,int,1)<430>
ASSIGN(b)<432>:
NUMBER(0)<432>
;
DEFINE_VAR(c,double,1)<437>
ASSIGN(c)<439>:
NUMBER(4)<439>
;
DEFINE_VAR(d,double,1)<441>
ASSIGN(d)<443>:
NUMBER(3)<443>
;
IDENTIFIER(myTest)<445>
assignment_short_operator(!)<446>
IDENTIFIER(myTest)<449>
assignment_operator(=)<450>
negative_operator()<451>
IDENTIFIER(myTest)<452>
IDENTIFIER(a)<454>
assignment_short_operator(+)<455>
IDENTIFIER(a)<458>
assignment_operator(+)<459>
NUMBER(1)<461>
IDENTIFIER(a)<463>
assignment_operator(=)<464>
IDENTIFIER(a)<465>
maths_operator(+)<466>
NUMBER(1)<467>
IDENTIFIER(b)<469>
assignment_short_operator(-)<470>
IDENTIFIER(b)<473>
assignment_operator(-)<474>
NUMBER(1)<476>
IDENTIFIER(b)<478>
assignment_operator(=)<479>
IDENTIFIER(b)<480>
maths_operator(-)<481>
NUMBER(1)<482>
IDENTIFIER(c)<484>
assignment_operator(%)<485>
IDENTIFIER(d)<487>
IDENTIFIER(c)<489>
maths_operator(%)<490>
IDENTIFIER(d)<491>
IDENTIFIER(c)<493>
assignment_operator(/)<494>
DECNUMBER(0.5)<496>
IDENTIFIER(c)<498>
maths_operator(/)<499>
IDENTIFIER(d)<500>
IDENTIFIER(c)<502>
assignment_operator(*)<503>
IDENTIFIER(d)<505>
IDENTIFIER(c)<507>
assignment_operator(=)<508>
IDENTIFIER(c)<509>
maths_operator(*)<510>
IDENTIFIER(d)<511>
zone_operator(close)<513>
DEFINE_FUNCTION(myStringTest,string,1)<517>
parentheses_operator(open)<518>
IDENTIFIER(a)<519>
info_operator()<520>
type_specifier(string)<521>
parentheses_operator(close)<522>
zone_operator(open)<523>
DEFINE_VAR(b,string,1)<527>
ASSIGN(b)<529>:
STRING(Hi!)<529>
;
delete_statement()<531>
IDENTIFIER(b)<532>
DEFINE_VAR(b,int,1)<537>
ASSIGN(b)<539>:
NUMBER(1)<539>
;
zone_operator(close)<541>
DEFINE_FUNCTION(ReturnHexArray,hex[2],1)<548>
parentheses_operator(open)<549>
parentheses_operator(close)<550>
zone_operator(open)<551>
return_statement()<552>
IDENTIFIER(this)<553>
dot_operator()<554>
IDENTIFIER(globJ)<555>
zone_operator(close)<557>
zone_operator(close)<558>
DEFINE_CLASS(AnotherClass,1)<559>
zone_operator(open)<564>
DEFINE_VAR(a,int,1)<571>
ASSIGN(a)<573>:
NUMBER(0)<573>
;
DEFINE_VAR(b,int,0)<581>
ASSIGN(b)<583>:
NUMBER(0)<583>
;
DEFINE_FUNCTION(Construct,AnotherClass,1)<591>
parentheses_operator(open)<592>
IDENTIFIER(a)<593>
info_operator()<594>
type_specifier(int)<595>
separation_operator()<596>
IDENTIFIER(b)<597>
info_operator()<598>
type_specifier(int)<599>
parentheses_operator(close)<600>
zone_operator(open)<601>
IDENTIFIER(this)<602>
dot_operator()<603>
IDENTIFIER(a)<604>
assignment_operator(=)<605>
IDENTIFIER(a)<606>
IDENTIFIER(this)<608>
dot_operator()<609>
IDENTIFIER(b)<610>
assignment_operator(=)<611>
IDENTIFIER(b)<612>
zone_operator(close)<614>
zone_operator(close)<615>
DEFINE_CLASS(Smth,1)<616>
zone_operator(open)<618>
DEFINE_FUNCTION(myTest,void,1)<622>
parentheses_operator(open)<623>
IDENTIFIER(a)<624>
info_operator()<625>
type_specifier(int)<626>
parentheses_operator(close)<627>
zone_operator(open)<628>
zone_operator(close)<629>
zone_operator(close)<630>
zone_operator(close)<631>
