STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
GROUP(AnotherLibrary,public)<5>
zone_operator(open)<7>
CLASS(MyClass,public)<8>
zone_operator(open)<10>
FUNCTION(NumOne,int,public)<11>
parentheses_operator(open)<16>
parentheses_operator(close)<17>
zone_operator(open)<18>
return_statement()<19>
NUMBER(1)<20>
end_operator()<21>
zone_operator(close)<22>
zone_operator(close)<23>
zone_operator(close)<24>
GROUP(LibFilNam,public)<25>
zone_operator(open)<28>
CLASS(section,public)<29>
zone_operator(open)<32>
FUNCTION(myFunction,string,public)<33>
parentheses_operator(open)<38>
DEFINE_VAR(input,int,public)<39>
parentheses_operator(close)<41>
zone_operator(open)<42>
DEFINE_VAR(output,string,public)<43>
end_operator()<45>
ZONE_LINE(0;)<46>
return_statement()<47>
VAR(output)<48>
end_operator()<49>
zone_operator(close)<50>
zone_operator(close)<51>
zone_operator(close)<52>
VAR(define)<53>
VAR(ZERO)<54>
NUMBER(0)<55>
end_operator()<56>
SETSIZE(int,2)<57>
end_operator()<60>
SETSIZE(double,10)<61>
end_operator()<64>
GROUP(FinalPitch,public)<65>
zone_operator(open)<68>
CLASS(Program,public)<69>
zone_operator(open)<72>
DEFINE_VAR(globA,int,public)<73>
assignment_operator(=)<76>
NUMBER(0)<77>
end_operator()<78>
DEFINE_VAR(globB,double,public)<79>
assignment_operator(=)<82>
DECNUMBER(0.0)<83>
end_operator()<84>
DEFINE_VAR(globC,float,public)<85>
assignment_operator(=)<88>
DECNUMBER(0.0)<89>
end_operator()<90>
DEFINE_VAR(globD,char,public)<91>
assignment_operator(=)<94>
CHAR(D)<95>
end_operator()<96>
DEFINE_VAR(globE,string,public)<97>
assignment_operator(=)<100>
STRING(Global E)<101>
end_operator()<102>
DEFINE_VAR(globF,bool,public)<103>
assignment_operator(=)<106>
BOOLEAN(true)<107>
end_operator()<108>
DEFINE_VAR(globG,file,public)<109>
assignment_operator(=)<112>
VAR(new)<113>
CALL(FileStream)<114>
parentheses_operator(open)<115>
STRING(path/to/my/file.txt)<116>
parentheses_operator(close)<117>
end_operator()<118>
DEFINE_VAR(globH,hex,public)<119>
assignment_operator(=)<122>
HEX(FF)<123>
end_operator()<124>
DEFINE_VAR(globI,string[1],public)<125>
assignment_operator(=)<130>
VAR(new)<131>
CALL(Array:string[1])<132>
parentheses_operator(open)<138>
NUMBER(6)<139>
parentheses_operator(close)<140>
end_operator()<141>
DEFINE_VAR(globJ,hex[2],private)<142>
assignment_operator(=)<148>
VAR(new)<149>
CALL(Array:hex[2])<150>
parentheses_operator(open)<157>
NUMBER(8)<158>
separation_operator()<159>
NUMBER(2)<160>
parentheses_operator(close)<161>
end_operator()<162>
FUNCTION(Main,int,public)<163>
parentheses_operator(open)<169>
DEFINE_VAR(envi,string[1],public)<170>
separation_operator()<174>
DEFINE_VAR(length,int,public)<175>
parentheses_operator(close)<177>
zone_operator(open)<178>
CALL(Func)<179>
parentheses_operator(open)<180>
parentheses_operator(close)<181>
end_operator()<182>
DEFINE_VAR(a,^int,public)<183>
assignment_operator(=)<186>
NUMBER(0)<187>
end_operator()<188>
DEFINE_VAR(b,int,public)<189>
assignment_operator(=)<191>
NUMBER(1)<192>
end_operator()<193>
DEFINE_VAR(c,^int,public)<194>
assignment_operator(=)<197>
CALL(Test)<198>
parentheses_operator(open)<199>
VAR(a)<200>
separation_operator()<201>
NUMBER(1)<202>
parentheses_operator(close)<203>
end_operator()<204>
VAR(a)<205>
assignment_operator(=)<206>
NUMBER(1)<207>
separation_operator()<208>
VAR(c)<209>
assignment_operator(=)<210>
NUMBER(5)<211>
end_operator()<212>
CALL(PlusOne)<213>
parentheses_operator(open)<214>
ref_statement()<215>
VAR(b)<216>
parentheses_operator(close)<217>
end_operator()<218>
DEFINE_VAR(myTest,bool,public)<219>
assignment_operator(=)<221>
BOOLEAN(false)<222>
end_operator()<223>
if_statement()<224>
parentheses_operator(open)<225>
VAR(myTest)<226>
comparison_operator(=)<227>
BOOLEAN(true)<229>
parentheses_operator(close)<230>
zone_operator(open)<231>
zone_operator(close)<232>
else_statement()<233>
zone_operator(open)<234>
zone_operator(close)<235>
if_statement()<236>
parentheses_operator(open)<237>
VAR(myTest)<238>
comparison_operator(!)<239>
BOOLEAN(true)<241>
parentheses_operator(close)<242>
zone_operator(open)<243>
zone_operator(close)<244>
if_statement()<245>
parentheses_operator(open)<246>
NUMBER(1)<247>
comparison_operator(>)<248>
NUMBER(5)<250>
comparison_operator(|)<251>
NUMBER(1)<253>
comparison_operator(~>)<254>
NUMBER(5)<255>
comparison_operator(|)<256>
parentheses_operator(open)<258>
NUMBER(1)<259>
comparison_operator(~>)<260>
NUMBER(1)<261>
comparison_operator(&)<262>
NUMBER(1)<264>
comparison_operator(~<)<0>
NUMBER(1)<266>
parentheses_operator(close)<267>
parentheses_operator(close)<268>
zone_operator(open)<269>
zone_operator(close)<270>
if_statement()<271>
parentheses_operator(open)<272>
NUMBER(1)<273>
comparison_operator(<)<0>
NUMBER(5)<276>
comparison_operator(|)<277>
NUMBER(1)<279>
comparison_operator(~<)<0>
NUMBER(5)<281>
parentheses_operator(close)<282>
zone_operator(open)<283>
zone_operator(close)<284>
return_statement()<285>
NUMBER(0)<286>
end_operator()<287>
zone_operator(close)<288>
FUNCTION(Func,void,private)<289>
parentheses_operator(open)<295>
parentheses_operator(close)<296>
zone_operator(open)<297>
zone_operator(close)<298>
FUNCTION(Test,^int,public)<299>
parentheses_operator(open)<306>
DEFINE_VAR(a,^int,public)<307>
separation_operator()<310>
DEFINE_VAR(b,int,public)<311>
parentheses_operator(close)<313>
zone_operator(open)<314>
VAR(a)<315>
assignment_operator(=)<316>
parentheses_operator(open)<317>
DEFINE_VAR(close,^int,public)<318>
VAR(b)<321>
end_operator()<322>
return_statement()<323>
VAR(a)<324>
end_operator()<325>
zone_operator(close)<326>
FUNCTION(PlusOne,void,public)<327>
parentheses_operator(open)<333>
ref_statement()<334>
DEFINE_VAR(a,int,public)<335>
parentheses_operator(close)<337>
zone_operator(open)<338>
VAR(a)<339>
assignment_short_operator(+)<340>
end_operator()<342>
zone_operator(close)<343>
FUNCTION(myTests,void,public)<344>
parentheses_operator(open)<350>
parentheses_operator(close)<351>
zone_operator(open)<352>
DEFINE_VAR(myTest,bool,public)<353>
assignment_operator(=)<355>
BOOLEAN(false)<356>
end_operator()<357>
DEFINE_VAR(a,int,public)<358>
assignment_operator(=)<360>
NUMBER(0)<361>
separation_operator()<362>
VAR(b)<363>
assignment_operator(=)<364>
NUMBER(0)<365>
end_operator()<366>
DEFINE_VAR(c,double,public)<367>
assignment_operator(=)<369>
NUMBER(4)<370>
separation_operator()<371>
VAR(d)<372>
assignment_operator(=)<373>
NUMBER(3)<374>
end_operator()<375>
VAR(myTest)<376>
assignment_short_operator(!)<377>
end_operator()<379>
VAR(myTest)<380>
assignment_operator(=)<381>
negative_operator()<382>
VAR(myTest)<383>
end_operator()<384>
VAR(a)<385>
assignment_short_operator(+)<386>
end_operator()<388>
VAR(a)<389>
assignment_operator(+)<390>
NUMBER(1)<392>
end_operator()<393>
VAR(a)<394>
assignment_operator(=)<395>
VAR(a)<396>
maths_operator(+)<397>
NUMBER(1)<398>
end_operator()<399>
VAR(b)<400>
assignment_short_operator(-)<401>
end_operator()<403>
VAR(b)<404>
assignment_operator(-)<405>
NUMBER(1)<407>
end_operator()<408>
VAR(b)<409>
assignment_operator(=)<410>
VAR(b)<411>
maths_operator(-)<412>
NUMBER(1)<413>
end_operator()<414>
VAR(c)<415>
assignment_operator(%)<416>
VAR(d)<418>
end_operator()<419>
VAR(c)<420>
maths_operator(%)<421>
VAR(d)<422>
end_operator()<423>
VAR(c)<424>
assignment_operator(/)<425>
DECNUMBER(0.5)<427>
end_operator()<428>
VAR(c)<429>
maths_operator(/)<430>
VAR(d)<431>
end_operator()<432>
VAR(c)<433>
assignment_operator(*)<434>
VAR(d)<436>
end_operator()<437>
VAR(c)<438>
assignment_operator(=)<439>
VAR(c)<440>
maths_operator(*)<441>
VAR(d)<442>
end_operator()<443>
zone_operator(close)<444>
FUNCTION(myStringTest,string,public)<445>
parentheses_operator(open)<450>
DEFINE_VAR(a,string,public)<451>
parentheses_operator(close)<453>
zone_operator(open)<454>
DEFINE_VAR(b,string,public)<455>
assignment_operator(=)<457>
STRING(Hi!)<458>
end_operator()<459>
delete_statement()<460>
VAR(b)<461>
end_operator()<462>
DEFINE_VAR(b,int,public)<463>
assignment_operator(=)<465>
NUMBER(1)<466>
end_operator()<467>
zone_operator(close)<468>
FUNCTION(ReturnHexArray,hex[2],public)<469>
parentheses_operator(open)<477>
parentheses_operator(close)<478>
zone_operator(open)<479>
return_statement()<480>
VAR(this.globJ)<483>
end_operator()<484>
zone_operator(close)<485>
zone_operator(close)<486>
CLASS(AnotherClass,public)<487>
zone_operator(open)<490>
DEFINE_VAR(a,int,public)<491>
assignment_operator(=)<494>
NUMBER(0)<495>
end_operator()<496>
DEFINE_VAR(b,int,private)<497>
assignment_operator(=)<500>
NUMBER(0)<501>
end_operator()<502>
FUNCTION(Construct,AnotherClass,public)<503>
parentheses_operator(open)<508>
DEFINE_VAR(a,int,public)<509>
separation_operator()<511>
DEFINE_VAR(b,int,public)<512>
parentheses_operator(close)<514>
zone_operator(open)<515>
VAR(this.a)<518>
assignment_operator(=)<519>
VAR(a)<520>
end_operator()<521>
VAR(this.b)<524>
assignment_operator(=)<525>
VAR(b)<526>
end_operator()<527>
zone_operator(close)<528>
zone_operator(close)<529>
CLASS(Smth,public)<530>
zone_operator(open)<532>
zone_operator(close)<533>
zone_operator(close)<534>
