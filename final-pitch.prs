STRING(Test 1!)<1>
end_operator()<2>
STRING(Test 2!)<3>
end_operator()<4>
GROUP(AnotherLibrary,public)<5>
zone_operator(open)<7>
CLASS(MyClass,public)<8>
zone_operator(open)<10>
FUNCTION(NumOne,int,public)<11>
parentheses_operator(open)<16>
parentheses_operator(close)<17>
zone_operator(open)<18>
return_statement()<19>
NUMBER(1)<20>
end_operator()<21>
zone_operator(close)<22>
zone_operator(close)<23>
zone_operator(close)<24>
GROUP(LibFilNam,public)<25>
zone_operator(open)<28>
CLASS(section,public)<29>
zone_operator(open)<32>
FUNCTION(myFunction,string,public)<33>
parentheses_operator(open)<38>
defVar(input,int,public)<39>
parentheses_operator(close)<41>
zone_operator(open)<42>
defVar(output,string,public)<43>
end_operator()<45>
ZONE_LINE(0;)<46>
return_statement()<47>
VAR(output)<48>
zone_operator(close)<50>
zone_operator(close)<51>
zone_operator(close)<52>
VAR(define)<53>
NUMBER(0)<55>
end_operator()<56>
VAR(setsize)<57>
NUMBER(2)<59>
end_operator()<60>
VAR(setsize)<61>
NUMBER(10)<63>
end_operator()<64>
GROUP(FinalPitch,public)<65>
zone_operator(open)<68>
CLASS(Program,public)<69>
zone_operator(open)<72>
defVar(globA,int,public)<73>
assignment_operator(=)<76>
NUMBER(0)<77>
end_operator()<78>
defVar(globB,double,public)<79>
assignment_operator(=)<82>
NUMBER(0.0)<83>
end_operator()<84>
defVar(globC,float,public)<85>
assignment_operator(=)<88>
NUMBER(0.0)<89>
end_operator()<90>
defVar(globD,char,public)<91>
assignment_operator(=)<94>
CHAR(D)<95>
end_operator()<96>
defVar(globE,string,public)<97>
assignment_operator(=)<100>
STRING(Global E)<101>
end_operator()<102>
defVar(globF,bool,public)<103>
assignment_operator(=)<106>
BOOLEAN(true)<107>
end_operator()<108>
defVar(globG,file,public)<109>
assignment_operator(=)<112>
VAR(new)<113>
parentheses_operator(open)<115>
STRING(path/to/my/file.txt)<116>
parentheses_operator(close)<117>
end_operator()<118>
defVar(globH,hex,public)<119>
assignment_operator(=)<122>
HEX(FF)<123>
end_operator()<124>
defVar(globI,string[1],public)<125>
assignment_operator(=)<130>
VAR(new)<131>
return_type_operator()<133>
defVar(open,string[1],public)<135>
NUMBER(6)<139>
parentheses_operator(close)<140>
end_operator()<141>
defVar(globJ,hex[2],private)<142>
assignment_operator(=)<148>
VAR(new)<149>
return_type_operator()<151>
defVar(open,hex[2],public)<153>
NUMBER(8)<158>
separation_operator()<159>
NUMBER(2)<160>
parentheses_operator(close)<161>
end_operator()<162>
FUNCTION(Main,int,public)<163>
parentheses_operator(open)<169>
defVar(envi,string[1],public)<170>
separation_operator()<174>
defVar(length,int,public)<175>
parentheses_operator(close)<177>
zone_operator(open)<178>
ERROR()<-1>
end_operator()<182>
defVar(a,^int,public)<183>
assignment_operator(=)<186>
NUMBER(0)<187>
end_operator()<188>
defVar(b,int,public)<189>
assignment_operator(=)<191>
NUMBER(1)<192>
end_operator()<193>
defVar(c,^int,public)<194>
assignment_operator(=)<197>
ERROR()<-1>
separation_operator()<201>
NUMBER(1)<202>
parentheses_operator(close)<203>
end_operator()<204>
VAR(a)<205>
NUMBER(1)<207>
separation_operator()<208>
VAR(c)<209>
NUMBER(5)<211>
end_operator()<212>
ERROR()<-1>
VAR(b)<216>
end_operator()<218>
defVar(myTest,bool,public)<219>
assignment_operator(=)<221>
BOOLEAN(false)<222>
end_operator()<223>
ERROR()<-1>
comparison_operator(=)<227>
BOOLEAN(true)<229>
parentheses_operator(close)<230>
zone_operator(open)<231>
zone_operator(close)<232>
ERROR()<-1>
comparison_operator(!)<236>
BOOLEAN(true)<238>
parentheses_operator(close)<239>
zone_operator(open)<240>
zone_operator(close)<241>
ERROR()<-1>
comparison_operator(>)<245>
NUMBER(5)<247>
comparison_operator(|)<248>
NUMBER(1)<250>
comparison_operator(~>)<251>
NUMBER(5)<252>
comparison_operator(|)<253>
parentheses_operator(open)<255>
NUMBER(1)<256>
comparison_operator(~>)<257>
NUMBER(1)<258>
comparison_operator(&)<259>
NUMBER(1)<261>
comparison_operator(~<)<0>
NUMBER(1)<263>
parentheses_operator(close)<264>
parentheses_operator(close)<265>
zone_operator(open)<266>
zone_operator(close)<267>
ERROR()<-1>
comparison_operator(<)<0>
NUMBER(5)<273>
comparison_operator(|)<274>
NUMBER(1)<276>
comparison_operator(~<)<0>
NUMBER(5)<278>
parentheses_operator(close)<279>
zone_operator(open)<280>
zone_operator(close)<281>
return_statement()<282>
NUMBER(0)<283>
end_operator()<284>
zone_operator(close)<285>
FUNCTION(Func,void,private)<286>
parentheses_operator(open)<292>
parentheses_operator(close)<293>
zone_operator(open)<294>
zone_operator(close)<295>
FUNCTION(Test,^int,public)<296>
parentheses_operator(open)<303>
defVar(a,^int,public)<304>
separation_operator()<307>
defVar(b,int,public)<308>
parentheses_operator(close)<310>
zone_operator(open)<311>
VAR(a)<312>
parentheses_operator(open)<314>
defVar(close,^int,public)<315>
VAR(b)<318>
return_statement()<320>
VAR(a)<321>
zone_operator(close)<323>
FUNCTION(PlusOne,void,public)<324>
parentheses_operator(open)<330>
ref_statement()<331>
defVar(a,int,public)<332>
parentheses_operator(close)<334>
zone_operator(open)<335>
VAR(a)<336>
end_operator()<339>
zone_operator(close)<340>
FUNCTION(myTests,void,public)<341>
parentheses_operator(open)<347>
parentheses_operator(close)<348>
zone_operator(open)<349>
defVar(myTest,bool,public)<350>
assignment_operator(=)<352>
BOOLEAN(false)<353>
end_operator()<354>
defVar(a,int,public)<355>
assignment_operator(=)<357>
NUMBER(0)<358>
separation_operator()<359>
VAR(b)<360>
NUMBER(0)<362>
end_operator()<363>
defVar(c,double,public)<364>
assignment_operator(=)<366>
NUMBER(4)<367>
separation_operator()<368>
VAR(d)<369>
NUMBER(3)<371>
end_operator()<372>
VAR(myTest)<373>
end_operator()<376>
VAR(myTest)<377>
negative_operator()<379>
VAR(myTest)<380>
VAR(a)<382>
end_operator()<385>
VAR(a)<386>
NUMBER(1)<389>
end_operator()<390>
VAR(a)<391>
VAR(a)<393>
NUMBER(1)<395>
end_operator()<396>
VAR(b)<397>
end_operator()<400>
VAR(b)<401>
NUMBER(1)<404>
end_operator()<405>
VAR(b)<406>
VAR(b)<408>
NUMBER(1)<410>
end_operator()<411>
VAR(c)<412>
VAR(d)<415>
VAR(c)<417>
VAR(d)<419>
VAR(c)<421>
NUMBER(0.5)<424>
end_operator()<425>
VAR(c)<426>
VAR(d)<428>
VAR(c)<430>
VAR(d)<433>
VAR(c)<435>
VAR(c)<437>
VAR(d)<439>
zone_operator(close)<441>
FUNCTION(myStringTest,string,public)<442>
parentheses_operator(open)<447>
defVar(a,string,public)<448>
parentheses_operator(close)<450>
zone_operator(open)<451>
defVar(b,string,public)<452>
assignment_operator(=)<454>
STRING(Hi!)<455>
end_operator()<456>
delete_statement()<457>
VAR(b)<458>
defVar(b,int,public)<460>
assignment_operator(=)<462>
NUMBER(1)<463>
end_operator()<464>
zone_operator(close)<465>
FUNCTION(ReturnHexArray,hex[2],public)<466>
parentheses_operator(open)<474>
parentheses_operator(close)<475>
zone_operator(open)<476>
return_statement()<477>
VAR(this.globJ)<480>
zone_operator(close)<482>
zone_operator(close)<483>
CLASS(AnotherClass,public)<484>
zone_operator(open)<487>
defVar(a,int,public)<488>
assignment_operator(=)<491>
NUMBER(0)<492>
end_operator()<493>
defVar(b,int,private)<494>
assignment_operator(=)<497>
NUMBER(0)<498>
end_operator()<499>
FUNCTION(Construct,AnotherClass,public)<500>
parentheses_operator(open)<505>
defVar(a,int,public)<506>
separation_operator()<508>
defVar(b,int,public)<509>
parentheses_operator(close)<511>
zone_operator(open)<512>
VAR(this.a)<515>
VAR(a)<517>
VAR(this.b)<521>
VAR(b)<523>
zone_operator(close)<525>
zone_operator(close)<526>
CLASS(Smth,public)<527>
zone_operator(open)<529>
zone_operator(close)<530>
zone_operator(close)<531>
