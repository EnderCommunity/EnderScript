STRING(Test 1!)<1>
STRING(Test 2!)<3>
DEFINE_GROUP(AnotherLibrary,1)<5>
zone_operator(open)<7>
DEFINE_CLASS(MyClass,1)<8>
zone_operator(open)<10>
DEFINE_FUNCTION(NumOne,int,1)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
DEFINE_GROUP(LibFilNam,1)<24>
zone_operator(open)<29>
DEFINE_CLASS(section,1)<30>
zone_operator(open)<35>
DEFINE_FUNCTION(myFunction,string,1)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
DEFINE_VAR(output,string,1)<49>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
SETSIZE(int,2)<58>
SETSIZE(double,10)<62>
DEFINE_GROUP(FinalPitch,1)<66>
zone_operator(open)<71>
DEFINE_CLASS(Program,1)<72>
zone_operator(open)<77>
DEFINE_VAR(globA,int,1)<84>
ASSIGN(globA)<86>:
NUMBER(0)<86>
;
DEFINE_VAR(globB,double,1)<94>
ASSIGN(globB)<96>:
DECNUMBER(0.0)<96>
;
DEFINE_VAR(globC,float,1)<104>
ASSIGN(globC)<106>:
DECNUMBER(0.0)<106>
;
DEFINE_VAR(globD,char,1)<114>
ASSIGN(globD)<116>:
CHAR(D)<116>
;
DEFINE_VAR(globE,string,1)<124>
ASSIGN(globE)<126>:
STRING(Global E)<126>
;
DEFINE_VAR(globF,bool,1)<134>
ASSIGN(globF)<136>:
BOOLEAN(true)<136>
;
DEFINE_VAR(globG,file,1)<144>
ASSIGN(globG)<146>:
IDENTIFIER(new)<146>
IDENTIFIER(FileStream)<147>
parentheses_operator(open)<148>
STRING(path/to/my/file.txt)<149>
parentheses_operator(close)<150>
;
DEFINE_VAR(globH,hex,1)<158>
ASSIGN(globH)<160>:
HEX(FF)<160>
;
DEFINE_VAR(globI,string[1],1)<170>
ASSIGN(globI)<172>:
IDENTIFIER(new)<172>
IDENTIFIER(Array)<173>
info_operator()<174>
type_specifier(string[1])<175>
parentheses_operator(open)<178>
NUMBER(6)<179>
parentheses_operator(close)<180>
;
DEFINE_VAR(globJ,hex[2],0)<191>
ASSIGN(globJ)<193>:
IDENTIFIER(new)<193>
IDENTIFIER(Array)<194>
info_operator()<195>
type_specifier(hex[2])<196>
parentheses_operator(open)<200>
NUMBER(8)<201>
separation_operator()<202>
NUMBER(2)<203>
parentheses_operator(close)<204>
;
DEFINE_FUNCTION(Main,int,1)<212>
parentheses_operator(open)<213>
IDENTIFIER(envi)<214>
info_operator()<215>
type_specifier(string[1])<216>
separation_operator()<219>
IDENTIFIER(length)<220>
info_operator()<221>
type_specifier(int)<222>
parentheses_operator(close)<223>
zone_operator(open)<224>
IDENTIFIER(Func)<225>
parentheses_operator(open)<226>
parentheses_operator(close)<227>
DEFINE_VAR(a,^int,1)<233>
ASSIGN(a)<235>:
NUMBER(0)<235>
;
DEFINE_VAR(b,int,1)<240>
ASSIGN(b)<242>:
NUMBER(1)<242>
;
DEFINE_VAR(c,^int,1)<248>
ASSIGN(c)<250>:
IDENTIFIER(Test)<250>
parentheses_operator(open)<251>
IDENTIFIER(a)<252>
separation_operator()<253>
NUMBER(1)<254>
parentheses_operator(close)<255>
;
IDENTIFIER(a)<257>
assignment_operator(=)<258>
NUMBER(1)<259>
separation_operator()<260>
IDENTIFIER(c)<261>
assignment_operator(=)<262>
NUMBER(5)<263>
IDENTIFIER(a)<265>
assignment_operator(=)<266>
IDENTIFIER(c)<267>
assignment_operator(=)<268>
NUMBER(6)<269>
IDENTIFIER(PlusOne)<271>
parentheses_operator(open)<272>
IDENTIFIER(b)<273>
info_operator()<274>
ref_statement()<275>
parentheses_operator(close)<276>
DEFINE_VAR(myTest,bool,1)<281>
ASSIGN(myTest)<283>:
BOOLEAN(false)<283>
;
if_statement()<285>
parentheses_operator(open)<286>
IDENTIFIER(myTest)<287>
comparison_operator(=)<288>
BOOLEAN(true)<290>
parentheses_operator(close)<291>
zone_operator(open)<292>
zone_operator(close)<293>
else_statement()<294>
zone_operator(open)<295>
zone_operator(close)<296>
if_statement()<297>
parentheses_operator(open)<298>
IDENTIFIER(myTest)<299>
comparison_operator(!)<300>
BOOLEAN(true)<302>
parentheses_operator(close)<303>
zone_operator(open)<304>
zone_operator(close)<305>
if_statement()<306>
parentheses_operator(open)<307>
NUMBER(1)<308>
comparison_operator(>)<309>
NUMBER(5)<311>
comparison_operator(|)<312>
NUMBER(1)<314>
comparison_operator(~>)<315>
NUMBER(5)<316>
comparison_operator(|)<317>
parentheses_operator(open)<319>
NUMBER(1)<320>
comparison_operator(~>)<321>
NUMBER(1)<322>
comparison_operator(&)<323>
NUMBER(1)<325>
comparison_operator(~<)<0>
NUMBER(1)<327>
parentheses_operator(close)<328>
parentheses_operator(close)<329>
zone_operator(open)<330>
zone_operator(close)<331>
if_statement()<332>
parentheses_operator(open)<333>
NUMBER(1)<334>
comparison_operator(<)<0>
NUMBER(5)<337>
comparison_operator(|)<338>
NUMBER(1)<340>
comparison_operator(~<)<0>
NUMBER(5)<342>
parentheses_operator(close)<343>
zone_operator(open)<344>
zone_operator(close)<345>
return_statement()<346>
NUMBER(0)<347>
zone_operator(close)<349>
DEFINE_FUNCTION(Func,void,0)<356>
parentheses_operator(open)<357>
parentheses_operator(close)<358>
zone_operator(open)<359>
zone_operator(close)<360>
DEFINE_FUNCTION(Test,^int,1)<368>
parentheses_operator(open)<369>
IDENTIFIER(a)<370>
info_operator()<371>
type_specifier(^int)<372>
separation_operator()<374>
IDENTIFIER(b)<375>
info_operator()<376>
type_specifier(int)<377>
parentheses_operator(close)<378>
zone_operator(open)<379>
IDENTIFIER(a)<380>
assignment_operator(=)<381>
parentheses_operator(open)<382>
type_specifier(^int)<383>
parentheses_operator(close)<385>
IDENTIFIER(b)<386>
return_statement()<388>
IDENTIFIER(a)<389>
zone_operator(close)<391>
DEFINE_FUNCTION(PlusOne,void,1)<398>
parentheses_operator(open)<399>
IDENTIFIER(a)<400>
info_operator()<401>
type_specifier(int)<402>
info_operator()<403>
ref_statement()<404>
parentheses_operator(close)<405>
zone_operator(open)<406>
IDENTIFIER(a)<407>
assignment_short_operator(+)<408>
zone_operator(close)<411>
DEFINE_FUNCTION(myTests,void,1)<418>
parentheses_operator(open)<419>
parentheses_operator(close)<420>
zone_operator(open)<421>
DEFINE_VAR(myTest,bool,1)<425>
ASSIGN(myTest)<427>:
BOOLEAN(false)<427>
;
DEFINE_VAR(a,int,1)<432>
ASSIGN(a)<434>:
NUMBER(0)<434>
;
DEFINE_VAR(b,int,1)<436>
ASSIGN(b)<438>:
NUMBER(0)<438>
;
DEFINE_VAR(c,double,1)<443>
ASSIGN(c)<445>:
NUMBER(4)<445>
;
DEFINE_VAR(d,double,1)<447>
ASSIGN(d)<449>:
NUMBER(3)<449>
;
IDENTIFIER(myTest)<451>
assignment_short_operator(!)<452>
IDENTIFIER(myTest)<455>
assignment_operator(=)<456>
negative_operator()<457>
IDENTIFIER(myTest)<458>
IDENTIFIER(a)<460>
assignment_short_operator(+)<461>
IDENTIFIER(a)<464>
assignment_operator(+)<465>
NUMBER(1)<467>
IDENTIFIER(a)<469>
assignment_operator(=)<470>
IDENTIFIER(a)<471>
maths_operator(+)<472>
NUMBER(1)<473>
IDENTIFIER(b)<475>
assignment_short_operator(-)<476>
IDENTIFIER(b)<479>
assignment_operator(-)<480>
NUMBER(1)<482>
IDENTIFIER(b)<484>
assignment_operator(=)<485>
IDENTIFIER(b)<486>
maths_operator(-)<487>
NUMBER(1)<488>
IDENTIFIER(c)<490>
assignment_operator(%)<491>
IDENTIFIER(d)<493>
IDENTIFIER(c)<495>
maths_operator(%)<496>
IDENTIFIER(d)<497>
IDENTIFIER(c)<499>
assignment_operator(/)<500>
DECNUMBER(0.5)<502>
IDENTIFIER(c)<504>
maths_operator(/)<505>
IDENTIFIER(d)<506>
IDENTIFIER(c)<508>
assignment_operator(*)<509>
IDENTIFIER(d)<511>
IDENTIFIER(c)<513>
assignment_operator(=)<514>
IDENTIFIER(c)<515>
maths_operator(*)<516>
IDENTIFIER(d)<517>
zone_operator(close)<519>
DEFINE_FUNCTION(myStringTest,string,1)<523>
parentheses_operator(open)<524>
IDENTIFIER(a)<525>
info_operator()<526>
type_specifier(string)<527>
parentheses_operator(close)<528>
zone_operator(open)<529>
DEFINE_VAR(b,string,1)<533>
ASSIGN(b)<535>:
STRING(Hi!)<535>
;
delete_statement()<537>
IDENTIFIER(b)<538>
DEFINE_VAR(b,int,1)<543>
ASSIGN(b)<545>:
NUMBER(1)<545>
;
zone_operator(close)<547>
DEFINE_FUNCTION(ReturnHexArray,hex[2],1)<554>
parentheses_operator(open)<555>
parentheses_operator(close)<556>
zone_operator(open)<557>
return_statement()<558>
IDENTIFIER(this)<559>
dot_operator()<560>
IDENTIFIER(globJ)<561>
zone_operator(close)<563>
zone_operator(close)<564>
DEFINE_CLASS(AnotherClass,1)<565>
zone_operator(open)<570>
DEFINE_VAR(a,int,1)<577>
ASSIGN(a)<579>:
NUMBER(0)<579>
;
DEFINE_VAR(b,int,0)<587>
ASSIGN(b)<589>:
NUMBER(0)<589>
;
DEFINE_FUNCTION(Construct,AnotherClass,1)<597>
parentheses_operator(open)<598>
IDENTIFIER(a)<599>
info_operator()<600>
type_specifier(int)<601>
separation_operator()<602>
IDENTIFIER(b)<603>
info_operator()<604>
type_specifier(int)<605>
parentheses_operator(close)<606>
zone_operator(open)<607>
IDENTIFIER(this)<608>
dot_operator()<609>
IDENTIFIER(a)<610>
assignment_operator(=)<611>
IDENTIFIER(a)<612>
IDENTIFIER(this)<614>
dot_operator()<615>
IDENTIFIER(b)<616>
assignment_operator(=)<617>
IDENTIFIER(b)<618>
zone_operator(close)<620>
zone_operator(close)<621>
DEFINE_CLASS(Smth,1)<622>
zone_operator(open)<624>
DEFINE_FUNCTION(myTest,void,1)<628>
parentheses_operator(open)<629>
IDENTIFIER(a)<630>
info_operator()<631>
type_specifier(int)<632>
parentheses_operator(close)<633>
zone_operator(open)<634>
zone_operator(close)<635>
zone_operator(close)<636>
zone_operator(close)<637>
