STRING(Test 1!)<1>
STRING(Test 2!)<3>
GROUP(AnotherLibrary,1)<5>
zone_operator(open)<7>
CLASS(MyClass,1)<8>
zone_operator(open)<10>
DEFINE_FUNCTION(NumOne,int,1)<14>
parentheses_operator(open)<15>
parentheses_operator(close)<16>
zone_operator(open)<17>
return_statement()<18>
NUMBER(1)<19>
zone_operator(close)<21>
zone_operator(close)<22>
zone_operator(close)<23>
GROUP(LibFilNam,1)<24>
zone_operator(open)<29>
CLASS(section,1)<30>
zone_operator(open)<35>
DEFINE_FUNCTION(myFunction,string,1)<39>
parentheses_operator(open)<40>
IDENTIFIER(input)<41>
info_operator()<42>
type_specifier(int)<43>
parentheses_operator(close)<44>
zone_operator(open)<45>
DEFINE_VAR(output,string,1)<49>
ZONE_LINE(0;)<51>
return_statement()<52>
IDENTIFIER(output)<53>
zone_operator(close)<55>
zone_operator(close)<56>
zone_operator(close)<57>
IDENTIFIER(define)<58>
IDENTIFIER(ZERO)<59>
NUMBER(0)<60>
SETSIZE(int,2)<62>
SETSIZE(double,10)<66>
GROUP(FinalPitch,1)<70>
zone_operator(open)<75>
CLASS(Program,1)<76>
zone_operator(open)<81>
DEFINE_VAR(globA,int,1)<88>
ASSIGN(globA)<90>:
NUMBER(0)<90>
;
DEFINE_VAR(globB,double,1)<98>
ASSIGN(globB)<100>:
DECNUMBER(0.0)<100>
;
DEFINE_VAR(globC,float,1)<108>
ASSIGN(globC)<110>:
DECNUMBER(0.0)<110>
;
DEFINE_VAR(globD,char,1)<118>
ASSIGN(globD)<120>:
CHAR(D)<120>
;
DEFINE_VAR(globE,string,1)<128>
ASSIGN(globE)<130>:
STRING(Global E)<130>
;
DEFINE_VAR(globF,bool,1)<138>
ASSIGN(globF)<140>:
BOOLEAN(true)<140>
;
DEFINE_VAR(globG,file,1)<148>
ASSIGN(globG)<150>:
IDENTIFIER(new)<150>
IDENTIFIER(FileStream)<151>
parentheses_operator(open)<152>
STRING(path/to/my/file.txt)<153>
parentheses_operator(close)<154>
;
DEFINE_VAR(globH,hex,1)<162>
ASSIGN(globH)<164>:
HEX(FF)<164>
;
DEFINE_VAR(globI,string[1],1)<174>
ASSIGN(globI)<176>:
IDENTIFIER(new)<176>
IDENTIFIER(Array)<177>
info_operator()<178>
type_specifier(string[1])<179>
parentheses_operator(open)<182>
NUMBER(6)<183>
parentheses_operator(close)<184>
;
DEFINE_VAR(globJ,hex[2],0)<195>
ASSIGN(globJ)<197>:
IDENTIFIER(new)<197>
IDENTIFIER(Array)<198>
info_operator()<199>
type_specifier(hex[2])<200>
parentheses_operator(open)<204>
NUMBER(8)<205>
separation_operator()<206>
NUMBER(2)<207>
parentheses_operator(close)<208>
;
DEFINE_FUNCTION(Main,int,1)<216>
parentheses_operator(open)<217>
IDENTIFIER(envi)<218>
info_operator()<219>
type_specifier(string[1])<220>
separation_operator()<223>
IDENTIFIER(length)<224>
info_operator()<225>
type_specifier(int)<226>
parentheses_operator(close)<227>
zone_operator(open)<228>
IDENTIFIER(Func)<229>
parentheses_operator(open)<230>
parentheses_operator(close)<231>
DEFINE_VAR(a,^int,1)<237>
ASSIGN(a)<239>:
NUMBER(0)<239>
;
DEFINE_VAR(b,int,1)<244>
ASSIGN(b)<246>:
NUMBER(1)<246>
;
DEFINE_VAR(c,^int,1)<252>
ASSIGN(c)<254>:
IDENTIFIER(Test)<254>
parentheses_operator(open)<255>
IDENTIFIER(a)<256>
separation_operator()<257>
NUMBER(1)<258>
parentheses_operator(close)<259>
;
IDENTIFIER(a)<261>
assignment_operator(=)<262>
NUMBER(1)<263>
separation_operator()<264>
IDENTIFIER(c)<265>
assignment_operator(=)<266>
NUMBER(5)<267>
IDENTIFIER(PlusOne)<269>
parentheses_operator(open)<270>
IDENTIFIER(b)<271>
info_operator()<272>
ref_statement()<273>
parentheses_operator(close)<274>
DEFINE_VAR(myTest,bool,1)<279>
ASSIGN(myTest)<281>:
BOOLEAN(false)<281>
;
if_statement()<283>
parentheses_operator(open)<284>
IDENTIFIER(myTest)<285>
comparison_operator(=)<286>
BOOLEAN(true)<288>
parentheses_operator(close)<289>
zone_operator(open)<290>
zone_operator(close)<291>
else_statement()<292>
zone_operator(open)<293>
zone_operator(close)<294>
if_statement()<295>
parentheses_operator(open)<296>
IDENTIFIER(myTest)<297>
comparison_operator(!)<298>
BOOLEAN(true)<300>
parentheses_operator(close)<301>
zone_operator(open)<302>
zone_operator(close)<303>
if_statement()<304>
parentheses_operator(open)<305>
NUMBER(1)<306>
comparison_operator(>)<307>
NUMBER(5)<309>
comparison_operator(|)<310>
NUMBER(1)<312>
comparison_operator(~>)<313>
NUMBER(5)<314>
comparison_operator(|)<315>
parentheses_operator(open)<317>
NUMBER(1)<318>
comparison_operator(~>)<319>
NUMBER(1)<320>
comparison_operator(&)<321>
NUMBER(1)<323>
comparison_operator(~<)<0>
NUMBER(1)<325>
parentheses_operator(close)<326>
parentheses_operator(close)<327>
zone_operator(open)<328>
zone_operator(close)<329>
if_statement()<330>
parentheses_operator(open)<331>
NUMBER(1)<332>
comparison_operator(<)<0>
NUMBER(5)<335>
comparison_operator(|)<336>
NUMBER(1)<338>
comparison_operator(~<)<0>
NUMBER(5)<340>
parentheses_operator(close)<341>
zone_operator(open)<342>
zone_operator(close)<343>
return_statement()<344>
NUMBER(0)<345>
zone_operator(close)<347>
DEFINE_FUNCTION(Func,void,0)<354>
parentheses_operator(open)<355>
parentheses_operator(close)<356>
zone_operator(open)<357>
zone_operator(close)<358>
DEFINE_FUNCTION(Test,^int,1)<366>
parentheses_operator(open)<367>
IDENTIFIER(a)<368>
state_operator()<369>
type_specifier(^int)<371>
separation_operator()<373>
IDENTIFIER(b)<374>
state_operator()<375>
type_specifier(int)<377>
parentheses_operator(close)<378>
zone_operator(open)<379>
IDENTIFIER(a)<380>
assignment_operator(=)<381>
parentheses_operator(open)<382>
type_specifier(^int)<383>
parentheses_operator(close)<385>
IDENTIFIER(b)<386>
return_statement()<388>
IDENTIFIER(a)<389>
zone_operator(close)<391>
DEFINE_FUNCTION(PlusOne,void,1)<398>
parentheses_operator(open)<399>
IDENTIFIER(a)<400>
state_operator()<401>
type_specifier(int)<403>
info_operator()<404>
ref_statement()<405>
parentheses_operator(close)<406>
zone_operator(open)<407>
IDENTIFIER(a)<408>
assignment_short_operator(+)<409>
zone_operator(close)<412>
DEFINE_FUNCTION(myTests,void,1)<419>
parentheses_operator(open)<420>
parentheses_operator(close)<421>
zone_operator(open)<422>
DEFINE_VAR(myTest,bool,1)<426>
ASSIGN(myTest)<428>:
BOOLEAN(false)<428>
;
DEFINE_VAR(a,int,1)<433>
ASSIGN(a)<435>:
NUMBER(0)<435>
;
DEFINE_VAR(b,int,1)<437>
ASSIGN(b)<439>:
NUMBER(0)<439>
;
DEFINE_VAR(c,double,1)<444>
ASSIGN(c)<446>:
NUMBER(4)<446>
;
DEFINE_VAR(d,double,1)<448>
ASSIGN(d)<450>:
NUMBER(3)<450>
;
IDENTIFIER(myTest)<452>
assignment_short_operator(!)<453>
IDENTIFIER(myTest)<456>
assignment_operator(=)<457>
negative_operator()<458>
IDENTIFIER(myTest)<459>
IDENTIFIER(a)<461>
assignment_short_operator(+)<462>
IDENTIFIER(a)<465>
assignment_operator(+)<466>
NUMBER(1)<468>
IDENTIFIER(a)<470>
assignment_operator(=)<471>
IDENTIFIER(a)<472>
maths_operator(+)<473>
NUMBER(1)<474>
IDENTIFIER(b)<476>
assignment_short_operator(-)<477>
IDENTIFIER(b)<480>
assignment_operator(-)<481>
NUMBER(1)<483>
IDENTIFIER(b)<485>
assignment_operator(=)<486>
IDENTIFIER(b)<487>
maths_operator(-)<488>
NUMBER(1)<489>
IDENTIFIER(c)<491>
assignment_operator(%)<492>
IDENTIFIER(d)<494>
IDENTIFIER(c)<496>
maths_operator(%)<497>
IDENTIFIER(d)<498>
IDENTIFIER(c)<500>
assignment_operator(/)<501>
DECNUMBER(0.5)<503>
IDENTIFIER(c)<505>
maths_operator(/)<506>
IDENTIFIER(d)<507>
IDENTIFIER(c)<509>
assignment_operator(*)<510>
IDENTIFIER(d)<512>
IDENTIFIER(c)<514>
assignment_operator(=)<515>
IDENTIFIER(c)<516>
maths_operator(*)<517>
IDENTIFIER(d)<518>
zone_operator(close)<520>
DEFINE_FUNCTION(myStringTest,string,1)<524>
parentheses_operator(open)<525>
IDENTIFIER(a)<526>
state_operator()<527>
type_specifier(string)<529>
parentheses_operator(close)<530>
zone_operator(open)<531>
DEFINE_VAR(b,string,1)<535>
ASSIGN(b)<537>:
STRING(Hi!)<537>
;
delete_statement()<539>
IDENTIFIER(b)<540>
DEFINE_VAR(b,int,1)<545>
ASSIGN(b)<547>:
NUMBER(1)<547>
;
zone_operator(close)<549>
DEFINE_FUNCTION(ReturnHexArray,hex[2],1)<556>
parentheses_operator(open)<557>
parentheses_operator(close)<558>
zone_operator(open)<559>
return_statement()<560>
IDENTIFIER(this)<561>
dot_operator()<562>
IDENTIFIER(globJ)<563>
zone_operator(close)<565>
zone_operator(close)<566>
CLASS(AnotherClass,1)<567>
zone_operator(open)<572>
DEFINE_VAR(a,int,1)<579>
ASSIGN(a)<581>:
NUMBER(0)<581>
;
DEFINE_VAR(b,int,0)<589>
ASSIGN(b)<591>:
NUMBER(0)<591>
;
DEFINE_FUNCTION(Construct,AnotherClass,1)<599>
parentheses_operator(open)<600>
IDENTIFIER(a)<601>
info_operator()<602>
type_specifier(int)<603>
separation_operator()<604>
IDENTIFIER(b)<605>
info_operator()<606>
type_specifier(int)<607>
parentheses_operator(close)<608>
zone_operator(open)<609>
IDENTIFIER(this)<610>
dot_operator()<611>
IDENTIFIER(a)<612>
assignment_operator(=)<613>
IDENTIFIER(a)<614>
IDENTIFIER(this)<616>
dot_operator()<617>
IDENTIFIER(b)<618>
assignment_operator(=)<619>
IDENTIFIER(b)<620>
zone_operator(close)<622>
zone_operator(close)<623>
CLASS(Smth,1)<624>
zone_operator(open)<626>
DEFINE_FUNCTION(myTest,void,1)<630>
parentheses_operator(open)<631>
IDENTIFIER(a)<632>
info_operator()<633>
type_specifier(int)<634>
parentheses_operator(close)<635>
zone_operator(open)<636>
zone_operator(close)<637>
zone_operator(close)<638>
zone_operator(close)<639>
