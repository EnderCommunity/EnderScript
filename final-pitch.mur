#header <nothing-to-see-here> <allow-separate> <no-comments>
//^ The header is used to give the compiler nessessary information before it
//starts compiling the code. Flags start with the operators "--". If you do not
//wish to pass any information to the compiler, you can just remove it.

//The available flags are:
//"no-comments": can be used to tell the compiler to not look for comments in this
//file
//"no-preprocessor-methods": can be used to tell the compiler that this file does
//not contain any preprocessor methods
//"skip-processor": can be used to tell the compiler to not compile the code after
//the header, and jump to the C compiler compiling stage.

/*

Murmur | (C) EnderCommunity
------------------------------------------------------------------------------------
This is a pitch file for Murmur that will include the syntax and structure
of Murmur, and all the functions that it can use.

(!) This is nowhere near being final, this is all just a pitch.

*/

// (!) All the functions used outside of groups are seen by the compiler as
//preprocessor fucntions! So any normal code outside of groups that is not a
//preprocessor-related feature will cause the compiler to exit with an error.

#separate start //You can ask the compiler to allow you to use C code in your Mur code
/* Do some weird C-wizardry */
#separate end

using system.io; //Tell the compiler that the program is going to use the "system"
                 //input/output library

import "path/to/my/file.mur"; //Import another Murmur file!

define ZERO 0; //You can use the `define` function to define a variable that
               //will be replaced by the provided value before the execution
               //of this code

setsize int 2; //Set a custom size of memory (in bytes) to allocate for any type
setsize double 10; //You can do the same with all the built-in types

import "path/to/my/file2.mur"; //You need to pay attention to the importing order
//of your files! For example, "file.mur" will not be able to use the custom set
//amount of memory for the 'int' variable, whereas "file2.mur" will be able to
//use it with no problem whatsoever.

// (!) Modules may not be necessary anymore with this new arrangement

public group Start { //Groups can help you keep a whole block of code within one
              //structure to better organise your code

    //Groups can only contain classes, any normal code here will cause the
    //program to crash.

    public class Program { //Classes can be used to completely seperate functions from one
                    //another, in case you wanted to prevent other classes from
                    //accessing some variables or functions

        int globA = 0;
        double globB = 0.0;
        float globC = 0.0;
        char globD = 'D';
        string globE = "Global E";
        bool globF = true;
        file globG = new FileStream("path/to/my/file.txt");
        hex globH = 0x000000; //Are hex variables really necessary? (tmp)

        public function::int Main(string[] envi, int length){ //This is the main
                                                       //function in the program!
                                                       //All Murmur programs
                                                       //should include a main
                                                       //function.

            //This is a public function! (It can be accessed from anywhere
            //outside this class)

            Func(); //You can access any function inside this class

            ^int a = 0; //This variable will allocate the custom set amount of
                        //memory specified at the start of this program!

            int b = 1; //This variable will allocate the default amount of
                       //memory set by the compiler

            Test(a, 1); //You can pass all types of variables to other functions

            return 0; //This is the final program output code

        }

        private function::void Func(){
                        //^ This is the return type of the function!

            //This is a private function! (It can be accessed only by
            //other functions inside this class)

            //Your code goes here!

        }

        public function::^int Test(^int a, int b){

            a = (^int) b;

            return a;

        }

        public function::void PlusOne(ref int a){ //with the keyword "ref", you can make changes to the originally passed variable within this function
                                    //^ "reference"
                                    //int og = 0;
                                    //PlusOne(ref og);

            a++; //the value of 'og' will change to '1'!

        }

    }

    public class AnotherClass {

        public int a = 0;
        private int b = 0;

        function::constructor(int a, int b){ //You can use constructors in your classes!

            this.a = a;
            this.b = b;

        }

    }

    class Smth { //Any object with no state indicator will be set to 'public' by default
        //
    }

}